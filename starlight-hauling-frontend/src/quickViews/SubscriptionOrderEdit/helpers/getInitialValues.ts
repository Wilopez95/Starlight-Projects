import { determinePartOfDay } from '@root/components/OrderTimePicker/helpers';
import { addressFormat } from '@root/helpers';
import { Subscription } from '@root/stores/subscription/Subscription';
import { SubscriptionOrder } from '@root/stores/subscriptionOrder/SubscriptionOrder';
import { IConfigurableSubscriptionOrder, SubscriptionOrderStatusEnum } from '@root/types';

// TODO: remove defaultValues for edit-only form
export const DEFAULT_SUBSCRIPTION_ORDER_VALUE: IConfigurableSubscriptionOrder = {
  id: 0,
  createdAt: new Date(),
  updatedAt: new Date(),
  businessLineId: 0,
  customerId: 0,
  jobSiteId: null,
  serviceDate: new Date(),
  callOnWayPhoneNumber: null,
  textOnWayPhoneNumber: null,
  alleyPlacement: false,
  jobSiteNote: null,
  jobSiteContactId: 0,
  jobSiteContactTextOnly: false,
  poRequired: false,
  permitRequired: false,
  signatureRequired: false,
  bestTimeToComeFrom: '',
  bestTimeToComeTo: '',
  highPriority: false,
  earlyPick: false,
  someoneOnSite: false,
  toRoll: false,
  subscriptionContactId: 0,
  promoId: null,
  grandTotal: null,
  instructionsForDriver: null,
  status: SubscriptionOrderStatusEnum.scheduled,
  billableLineItemsTotal: 0,
  lineItems: [],
  unapprovedComment: '',
  unfinalizedComment: '',
  overrideCreditLimit: false,
  droppedEquipmentItem: '',
  pickedUpEquipmentItem: '',
  isOneTimePO: false,
  oneTimePurchaseOrderNumber: '',
  applySurcharges: false,
  surcharges: [],
  subscriptionOrderOptions: [],
};

export const getInitialValues = (
  order: SubscriptionOrder,
  subscription: Subscription,
): IConfigurableSubscriptionOrder => ({
  id: order.id,
  createdAt: order.createdAt,
  updatedAt: order.updatedAt,
  businessLineId: subscription.businessLine.id,
  customerId: subscription.customer.originalId,
  serviceDate: order.serviceDate,
  quantity: order.quantity,
  callOnWayPhoneNumber: order.callOnWayPhoneNumber,
  textOnWayPhoneNumber: order.textOnWayPhoneNumber,
  alleyPlacement: order.alleyPlacement,
  jobSiteId: order.jobSite?.originalId ?? order.jobSite?.id ?? null,
  poRequired: order.poRequired,
  permitRequired: order.permitRequired,

  assignedRoute: order.assignedRoute,

  jobSiteNote: order.jobSiteNote,
  jobSiteContactTextOnly: order.jobSiteContactTextOnly,
  signatureRequired: order.signatureRequired,
  bestTimeToComeFrom: order.bestTimeToComeFrom,
  bestTimeToComeTo: order.bestTimeToComeTo,
  bestTimeToCome: order.bestTimeToComeFrom
    ? determinePartOfDay(order.bestTimeToComeFrom, order.bestTimeToComeTo)
    : 'any',
  instructionsForDriver: order.instructionsForDriver,

  highPriority: order.highPriority,
  earlyPick: order.earlyPick,
  someoneOnSite: order.someoneOnSite,
  toRoll: order.toRoll,

  subscriptionContactId: order.subscriptionContact?.originalId ?? order.subscriptionContactId,
  jobSiteContactId: order.jobSiteContact?.originalId ?? order.jobSiteContactId,
  promo: order.promo,
  promoId: order.promoId,
  grandTotal: order.grandTotal,
  surcharges: [],

  globalRatesServicesId: order.globalRatesServicesId,
  customRatesGroupServicesId: order.customRatesGroupServicesId,
  price: order.price,
  purchaseOrder: order.purchaseOrder,
  purchaseOrderId: order.purchaseOrder?.id,
  isOneTimePO: order.purchaseOrder?.isOneTime ?? false,
  oneTimePurchaseOrderNumber: order.purchaseOrder?.isOneTime
    ? order.purchaseOrder?.poNumber
    : undefined,
  permitId: order.permit?.originalId,
  thirdPartyHaulerId: order.thirdPartyHaulerId,
  unlockOverrides: false,
  applySurcharges: order.applySurcharges ?? subscription.businessUnit.applySurcharges,
  overrideCreditLimit: false,

  billableServiceId: order.billableService.originalId ?? order.billableServiceId,
  equipmentItemId: order.billableService.equipmentItemId,
  materialId: order.material?.originalId,
  lineItems: order.lineItems,
  status: order.status,
  billableLineItemsTotal: order.billableLineItemsTotal,
  customRatesGroupId: order.customRatesGroup?.originalId,
  unapprovedComment: order.unapprovedComment,
  unfinalizedComment: order.unfinalizedComment,
  destinationJobSiteId: order.destinationJobSite?.originalId,
  destinationJobSiteLabel: order.destinationJobSite
    ? addressFormat(order.destinationJobSite?.address)
    : undefined,
  droppedEquipmentItem: order.droppedEquipmentItem,
  pickedUpEquipmentItem: order.pickedUpEquipmentItem,
  addTripCharge: order.addTripCharge,
  arrivedAt: order.arrivedAt,
  billedAt: order.billedAt,
  deletedAt: order.deletedAt,
  hasComments: order.hasComments,
  included: order.included,
  invoicedDate: order.invoicedDate,
  isFinalForService: order.isFinalForService,
  refactoredBeforeTaxesTotal: order.refactoredBeforeTaxesTotal,
  refactoredBillableLineItemsTotal: order.refactoredBillableLineItemsTotal,
  refactoredGrandTotal: order.refactoredGrandTotal,
  refactoredInvoicedAt: order.refactoredInvoicedAt,
  refactoredPaidAt: order.refactoredPaidAt,
  refactoredPrice: order.refactoredPrice,
  refactoredPriceGroupHistoricalId: order.refactoredPriceGroupHistoricalId,
  refactoredPriceId: order.refactoredPriceId,
  refactoredSurchargesTotal: order.refactoredSurchargesTotal,
  serviceDayOfWeekRequiredByCustomer: order.serviceDayOfWeekRequiredByCustomer,
  subscriptionId: order.subscriptionId,
  subscriptionOrderOptions: order.subscriptionOrderOptions,
});
