{"code":"export {};\r\n//# sourceMappingURL=types.js.map","references":["/Users/wilson/Documents/Starlight/starlight-shared-libs/node_modules/@types/react/index.d.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/shared-components/src/types/base/index.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/shared-components/src/common/Typography/types.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/common/TextInput/types.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/shared-components/build/common/TextInput/types.d.ts","writeByteOrderMark":false,"text":"import { ReactNode } from 'react';\r\nimport type { IBaseInput, SvgComponent } from \"../../types/base\";\r\nimport type { TextAlign } from \"../Typography/types\";\r\nexport declare type TextInputElement = HTMLInputElement | HTMLTextAreaElement;\r\nexport interface ITextInput extends IBaseInput<string | number | null> {\r\n    errorAlign?: TextAlign;\r\n    inputTextAlign?: TextAlign;\r\n    placeholder?: string;\r\n    ariaLabel?: string;\r\n    area?: boolean;\r\n    type?: 'text' | 'password' | 'hidden' | 'email' | 'number';\r\n    limits?: {\r\n        min?: number;\r\n        max?: number;\r\n    };\r\n    lengthLimits?: {\r\n        min?: number;\r\n        max?: number;\r\n    };\r\n    icon?: SvgComponent;\r\n    rightIcon?: SvgComponent | ((props: unknown) => void);\r\n    autoComplete?: 'true' | 'off' | 'name' | 'email' | 'username' | 'new-password' | 'current-password';\r\n    wrapClassName?: string;\r\n    className?: string;\r\n    inputContainerClassName?: string;\r\n    half?: boolean;\r\n    countable?: boolean;\r\n    borderError?: boolean;\r\n    reverse?: boolean;\r\n    fixedLength?: number;\r\n    confirmed?: boolean;\r\n    onChange(e: React.ChangeEvent<TextInputElement>): void;\r\n    onRightImageClick?(e: React.MouseEvent<HTMLOrSVGElement>): void;\r\n    onBlur?(e: React.FocusEvent<TextInputElement>): void;\r\n    onFocus?(e: React.FocusEvent<TextInputElement>): void;\r\n    onKeyUp?(e: React.KeyboardEvent<TextInputElement>): void;\r\n    onKeyDown?(e: React.KeyboardEvent<TextInputElement>): void;\r\n    onClick?(e: React.MouseEvent<TextInputElement> | React.MouseEvent<HTMLInputElement>): void;\r\n    onClearError?(): void;\r\n    children: ReactNode;\r\n}\r\n"}}
