{"code":"import configureMeasurements, { length, mass, volume, } from 'convert-units';\r\nimport { round } from 'lodash-es';\r\nvar UnitOfMeasurementType;\r\n(function (UnitOfMeasurementType) {\r\n    UnitOfMeasurementType[\"ShortTons\"] = \"t\";\r\n    UnitOfMeasurementType[\"LongTons\"] = \"lt\";\r\n    UnitOfMeasurementType[\"MetricTons\"] = \"mt\";\r\n    UnitOfMeasurementType[\"Kilograms\"] = \"kg\";\r\n    UnitOfMeasurementType[\"Pounds\"] = \"lbs\";\r\n    UnitOfMeasurementType[\"Meters\"] = \"m\";\r\n    UnitOfMeasurementType[\"Feet\"] = \"ft\";\r\n    UnitOfMeasurementType[\"CubicYards\"] = \"yd3\";\r\n    UnitOfMeasurementType[\"CubicMeters\"] = \"m3\";\r\n    UnitOfMeasurementType[\"Yards\"] = \"y\";\r\n})(UnitOfMeasurementType || (UnitOfMeasurementType = {}));\r\nconst createUnitsOfMeasurementConfig = (mass, length, volume) => ({\r\n    mass,\r\n    length,\r\n    volume,\r\n});\r\nconst unitsConfig = {\r\n    metric: createUnitsOfMeasurementConfig(UnitOfMeasurementType.MetricTons, UnitOfMeasurementType.Meters, UnitOfMeasurementType.CubicMeters),\r\n    imperial: createUnitsOfMeasurementConfig(UnitOfMeasurementType.LongTons, UnitOfMeasurementType.Feet, UnitOfMeasurementType.CubicYards),\r\n    us: createUnitsOfMeasurementConfig(UnitOfMeasurementType.ShortTons, UnitOfMeasurementType.Feet, UnitOfMeasurementType.CubicYards),\r\n};\r\nconst extendedMass = {\r\n    systems: {\r\n        metric: mass.systems.metric,\r\n        imperial: {\r\n            ...mass.systems.imperial,\r\n            lt: {\r\n                name: {\r\n                    singular: 'Long Ton',\r\n                    plural: 'Long Tons',\r\n                },\r\n                to_anchor: 2240,\r\n            },\r\n        },\r\n    },\r\n    anchors: {\r\n        ...mass.anchors,\r\n    },\r\n};\r\nconst convert = configureMeasurements({\r\n    length,\r\n    volume,\r\n    mass: extendedMass,\r\n});\r\nconst convertUnitOfMeasure = (value, from, to, precision = 4) => {\r\n    if (!value) {\r\n        return 0;\r\n    }\r\n    const convertedValue = convert(value).from(from).to(to);\r\n    return round(convertedValue, precision);\r\n};\r\nexport { convertUnitOfMeasure, UnitOfMeasurementType, unitsConfig, };\r\n//# sourceMappingURL=unitOfMeasureConversion.js.map","references":["/Users/wilson/Documents/Starlight/starlight-shared-libs/node_modules/convert-units/lib/cjs/index.d.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/node_modules/@types/lodash-es/index.d.ts"],"map":"{\"version\":3,\"file\":\"unitOfMeasureConversion.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/helpers/unitOfMeasureConversion.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,qBAAqB,EAAE,EAC5B,MAAM,EACN,IAAI,EAKJ,MAAM,GACP,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,KAAK,EAAE,MAAM,WAAW,CAAC;AAKlC,IAAK,qBAWJ;AAXD,WAAK,qBAAqB;IACxB,wCAAe,CAAA;IACf,wCAAe,CAAA;IACf,0CAAiB,CAAA;IACjB,yCAAgB,CAAA;IAChB,uCAAc,CAAA;IACd,qCAAY,CAAA;IACZ,oCAAW,CAAA;IACX,2CAAkB,CAAA;IAClB,2CAAkB,CAAA;IAClB,oCAAW,CAAA;AACb,CAAC,EAXI,qBAAqB,KAArB,qBAAqB,QAWzB;AA0BD,MAAM,8BAA8B,GAAG,CACrC,IAAqB,EACrB,MAAyB,EACzB,MAAyB,EACb,EAAE,CAAC,CAAC;IAChB,IAAI;IACJ,MAAM;IACN,MAAM;CACP,CAAC,CAAC;AAEH,MAAM,WAAW,GAAwB;IACvC,MAAM,EAAE,8BAA8B,CACpC,qBAAqB,CAAC,UAAU,EAChC,qBAAqB,CAAC,MAAM,EAC5B,qBAAqB,CAAC,WAAW,CAClC;IACD,QAAQ,EAAE,8BAA8B,CACtC,qBAAqB,CAAC,QAAQ,EAC9B,qBAAqB,CAAC,IAAI,EAC1B,qBAAqB,CAAC,UAAU,CACjC;IACD,EAAE,EAAE,8BAA8B,CAChC,qBAAqB,CAAC,SAAS,EAC/B,qBAAqB,CAAC,IAAI,EAC1B,qBAAqB,CAAC,UAAU,CACjC;CACF,CAAC;AAGF,MAAM,YAAY,GAA0C;IAC1D,OAAO,EAAE;QACP,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;QAC3B,QAAQ,EAAE;YACR,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ;YACxB,EAAE,EAAE;gBACF,IAAI,EAAE;oBACJ,QAAQ,EAAE,UAAU;oBACpB,MAAM,EAAE,WAAW;iBACpB;gBACD,SAAS,EAAE,IAAI;aAChB;SACF;KACF;IACD,OAAO,EAAE;QACP,GAAG,IAAI,CAAC,OAAO;KAChB;CACF,CAAC;AAEF,MAAM,OAAO,GAAG,qBAAqB,CAA2B;IAC9D,MAAM;IACN,MAAM;IACN,IAAI,EAAE,YAAY;CACnB,CAAC,CAAC;AAEH,MAAM,oBAAoB,GAAG,CAAC,KAAa,EAAE,IAAW,EAAE,EAAS,EAAE,SAAS,GAAG,CAAC,EAAU,EAAE;IAC5F,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,CAAC,CAAC;KACV;IACD,MAAM,cAAc,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAExD,OAAO,KAAK,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;AAC1C,CAAC,CAAC;AAEF,OAAO,EACL,oBAAoB,EACpB,qBAAqB,EAKrB,WAAW,GACZ,CAAC\"}","dts":{"name":"/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/shared-components/build/helpers/unitOfMeasureConversion.d.ts","writeByteOrderMark":false,"text":"declare type Units = CustomMassUnits | CustomLengthUnits | CustomVolumeUnits;\r\ndeclare enum UnitOfMeasurementType {\r\n    ShortTons = \"t\",\r\n    LongTons = \"lt\",\r\n    MetricTons = \"mt\",\r\n    Kilograms = \"kg\",\r\n    Pounds = \"lbs\",\r\n    Meters = \"m\",\r\n    Feet = \"ft\",\r\n    CubicYards = \"yd3\",\r\n    CubicMeters = \"m3\",\r\n    Yards = \"y\"\r\n}\r\nexport declare type CustomMassUnits = UnitOfMeasurementType.ShortTons | UnitOfMeasurementType.MetricTons | UnitOfMeasurementType.LongTons | UnitOfMeasurementType.Kilograms;\r\nexport declare type CustomLengthUnits = UnitOfMeasurementType.Meters | UnitOfMeasurementType.Feet;\r\nexport declare type CustomVolumeUnits = UnitOfMeasurementType.CubicYards | UnitOfMeasurementType.CubicMeters;\r\ninterface UnitConfig {\r\n    mass: CustomMassUnits;\r\n    length: CustomLengthUnits;\r\n    volume: CustomVolumeUnits;\r\n}\r\ndeclare type Measures = keyof UnitConfig;\r\ndeclare type MeasureSystemConfig = {\r\n    metric: UnitConfig;\r\n    imperial: UnitConfig;\r\n    us: UnitConfig;\r\n};\r\ndeclare const unitsConfig: MeasureSystemConfig;\r\ndeclare const convertUnitOfMeasure: (value: number, from: Units, to: Units, precision?: number) => number;\r\nexport { convertUnitOfMeasure, UnitOfMeasurementType, Units, Measures, UnitConfig, MeasureSystemConfig, unitsConfig, };\r\n"}}
