import path from 'path';
import dotenv from 'dotenv';

dotenv.config({
  path: path.join(process.cwd(), '.env'),
});

export const {
  NODE_ENV = 'production',
  ENV = 'production',

  PORT = 3000,
  API_PATH = '/api/v1',
  API_V2_PATH = '/api/v2',
  BASE_DOMAIN = 'starlightpro.net',
  API_HOST = 'http://localhost:3000',
  FE_HOST,
  RECYCLING_FE_HOST,
  TOKEN_COOKIE = 'identitytoken',
  PASSWORD_HASHING_ROUNDS = 10,

  BILLING_SERVICE_API_URL,
  UMS_SERVICE_API_URL,
  RECYCLING_SERVICE_API_URL,
  ROUTE_PLANNER_API_URL,
  PRICING_SERVICE_API_URL,

  SLOW_REQUEST_TIMEOUT = 1000,
  LOG_LEVEL,

  DB_HOST,
  DB_USER,
  DB_PASSWORD,
  DB_PORT = 5432,
  DB_NAME,

  SECRET,

  SENDGRID_SMTP_API_KEY_ID,
  SENDGRID_SENDER_EMAIL,

  AWS_S3_ACCESS_KEY_ID,
  AWS_S3_SECRET_ACCESS_KEY,
  AWS_S3_BUCKET,
  AWS_S3_REGION,

  MAPBOX_ACCESS_TOKEN,
  MAPBOX_ADMINISTRATIVE_TILESET_PREFIX,

  ELASTIC_URL,
  ELASTIC_PORT = 443,
  AUDIT_LOGS_ELASTIC_URL,
  AUDIT_LOGS_ELASTIC_PORT = 443,

  STARLIGHT_AUTH_API_URL,
  STARLIGHT_AUTH_API_PASSWORD,
  STARLIGHT_AUTH_API_TOKEN,
  TRASH_API_URL,
  PASSWORD_RESET_TEST_TOKEN,
  TRASH_API_TOKEN,
  SALES_POINT_API_TOKEN,

  CLOUDINARY_API_KEY,
  CLOUDINARY_API_SECRET,
  CLOUDINARY_CLOULD_NAME,
  CLOUDINARY_PROJECT_FOLDER,

  TWILIO_ACCOUNT_SID,
  TWILIO_AUTH_TOKEN,
  TWILIO_MSG_SERVICE_SID = 'MG8ab4c58a502e3c5eeea6aaf1766391e3',
  TWILIO_TC_MSG_SERVICE_SID = 'MG480408c0463db69b79a67e42df514f4f',

  AMQP_HOSTNAME,
  AMQP_PORT,
  AMQP_USERNAME,
  AMQP_PASSWORD,

  AMQP_QUEUE_CUSTOMER_BALANCES,
  // Might be not used yet (this is from development which is ahead)
  AMQP_QUEUE_CUSTOMER_OLDEST_UNPAID_INVOICE_DATE = 'customer_oldest_unpaid_invoice_date',
  // End ight not be used
  AMQP_QUEUE_ORDER_TOTALS_TO_BILLING,
  AMQP_QUEUE_NOTIFY_CUSTOMERS,
  AMQP_QUEUE_DISPATCH_ORDERS,
  AMQP_QUEUE_CUSTOMER_JOB_SITE_TO_BILLING,
  AMQP_QUEUE_BUSINESS_UNITS,
  AMQP_QUEUE_JOB_SITES_TO_BILLING,
  AMQP_QUEUE_CUSTOMERS_TO_BILLING,
  AMQP_QUEUE_CUSTOMERS_TO_ROUTE_PLANNER,
  AMQP_QUEUE_GENERATE_SUBSCRIPTION_ORDERS,
  AMQP_QUEUE_GENERATE_SUBSCRIPTION_WOS,
  AMQP_QUEUE_SYNC_SUBSCRIPTION_WOS_TO_DISPATCH,
  AMQP_QUEUE_SYNC_SUBSCRIPTION_WOS_FROM_DISPATCH,
  AMQP_QUEUE_SYNC_DELETE_WOS_TO_DISPATCH,
  AMQP_QUEUE_SYNC_SUBSCRIPTION_SERVICE_ITEMS_FROM_DISPATCH,
  AMQP_QUEUE_SYNC_SUBSCRIPTION_SERVICE_ITEMS_TO_DISPATCH,
  AMQP_QUEUE_FREQUENCY_PRORATION,
  AMQP_QUEUE_RECURRENT_ORDERS_TO_BILLING,
  AMQP_QUEUE_RECURRENT_ORDERS_BILLING_STATUS,
  AMQP_QUEUE_RECURRENT_ORDERS_TO_CORE,
  AMQP_QUEUE_FAILED_INVOICE_ORDERS_TO_CORE,
  AMQP_QUEUE_PAYMENT_METHODS_TO_CORE,
  AMQP_CUSTOMER_CONTACTS_QUEUE,
  AMQP_QUEUE_END_SUBSCRIPTIONS,
  AMQP_QUEUE_SYNC_JOB_SITES_TO_DISPATCH,
  AMQP_QUEUE_SYNC_TRUCKS_TO_DISPATCH,
  AMQP_QUEUE_SYNC_DRIVERS_TO_DISPATCH,
  AMQP_QUEUE_SYNC_WOS_MEDIA_TO_DISPATCH,
  AMQP_QUEUE_UPDATE_SUBSCRIPTIONS_BY_RATES_CHANGES,
  AMQP_QUEUE_WORK_ORDERS_TO_RECYCLING,
  AMQP_QUEUE_WORK_ORDERS_FROM_RECYCLING,
  AMQP_QUEUE_SYNC_INDEPENDENT_WOS_TO_DISPATCH,
  AMQP_QUEUE_SYNC_INDEPENDENT_WOS_FROM_DISPATCH,
  AMQP_QUEUE_BUSINESS_LINES,
  AMQP_QUEUE_SYNC_ORDERS_LOB,
  AMQP_QUEUE_UPDATE_PRICE_GROUPS,
  AMQP_QUEUE_RESUME_SUBSCRIPTIONS_EMAIL_NOTIFICATION,
  AMQP_QUEUE_GENERATE_REMINDERS,
  AMQP_QUEUE_BUSINESS_UNITS_MAIL_SETTINGS,
  AMQP_QUEUE_SALES_REP_HISTORY,
  AMQP_HISTORY_USERS_TOPIC,
  AMQP_QUEUE_HOLD_CUSTOMER_EMAIL_NOTIFICATION,
  AMQP_QUEUE_SUBSCRIPTIONS_EXPIRED_BILLING_PERIOD,
  // Might be not used yet (these are from development which is ahead)
  AMQP_QUEUE_RECYCLING_ORDERS_TO_ROUTE_PLANNER,
  AMQP_QUEUE_SUBSCRIPTION_HISTORY_ADD_INVOICE,
  AMQP_QUEUE_SUBSCRIPTION_HISTORY_ADD_PAYMENT,
  // End ight not be used
  AMQP_QUEUE_SUBSCRIPTIONS_PROLONGATION = 'prolongate_subscriptions',

  INDEX_RESYNC_MAX_BATCH_SIZE,
  SUBSCRIPTION_ORDERS_GENERATION_MAX_INTERVAL,
  SUBSCRIPTION_ORDERS_GENERATION_MAX_BATCH_SIZE,
  SUBSCRIPTION_WOS_GENERATION_MAX_BATCH_SIZE,
  SUBSCRIPTION_WOS_SYNC_MAX_BATCH_SIZE,

  AMQP_TENANTS_EXCHANGE,
  AMQP_COMPANIES_DATA_EXCHANGE,
  AMQP_BUSINESS_UNITS_EXCHANGE,
  AMQP_HAULING_DEAD_LETTER,
  AMQP_HISTORY_EXCHANGE,

  REDIS_HOST,
  REDIS_PORT = '6379',

  SERVICE_PUBLIC_KEY,
  SERVICE_SECRET_KEY,
  SERVICE_SECRET_KEY_PASSPHRASE,

  MID_ENCRYPTION_KEY,
  OVERPASS_HOST,

  SOCKET_IO_PORT = 3010,
  SOCKET_IO_PATH = '/api/chat',
  SOCKET_IO_TRANSPORT = 'websocket',

  E2E_HEAVY_API_CALL_TIMEOUT_SMALL = 2000,
  E2E_HEAVY_API_CALL_TIMEOUT_MEDIUM = 5000,
  E2E_HEAVY_API_CALL_TIMEOUT_LARGE = 10000,

  IMPORT_CUSTOMERS_MAX_ROWS_COUNT = 1000,
  IMPORT_JOB_SITES_MAX_ROWS_COUNT = 1000,
  // Might be not used yet (these are from development which is ahead)
  RATES_UPDATES_PROPAGATION_MAX_BATCH_SIZE = 50,
  AMQP_PROPAGATE_PRICING_CONFIG_UPDATES_EXCHANGE = 'pricing.config-updates',
  AMQP_QUEUE_PROPAGATE_ONE_TIME_LINE_ITEMS_RATES_UPDATES = 'pricing.propagate.one-time-line-items',
  AMQP_QUEUE_PROPAGATE_RECURRING_LINE_ITEMS_RATES_UPDATES = 'pricing.propagate.recurring-line-items',
  AMQP_QUEUE_PROPAGATE_ONE_TIME_SERVICES_RATES_UPDATES = 'pricing.propagate.one-time-services',
  AMQP_QUEUE_PROPAGATE_RECURRING_SERVICES_RATES_UPDATES = 'pricing.propagate.recurring-services',
  AMQP_QUEUE_PROPAGATE_SURCHARGES_RATES_UPDATES = 'pricing.propagate.surcharges',
  // End might not be used
  AMQP_QUEUE_GENERATE_DAILY_SUBSCRIPTION_ORDERS = 'generate_daily_subscription_orders',

  DD_TRACE_ENABLED = 'false',
  DD_TRACE_DEBUG = 'false',
  DD_TRACING_ENABLED = 'false',
  DD_VERSION = '1.1.2',
  DD_ENV = 'production',
  DD_LOGS_INJECTION = 'false',
  DD_RUNTIME_METRICS_ENABLED = 'false',
  DD_PROFILING_ENABLED = 'false',
  DD_TAGS,
  SENTRY_ENABLED = 'false',
  SENTRY_DSN,
  SENTRY_ENVIRONMENT = DD_ENV,
  SENTRY_DEBUG = 'false',
} = process.env;

export const LIGHT_LOGS = process.env.LIGHT_LOGS === 'true';
export const PRETTY_LOGS = process.env.PRETTY_LOGS === 'true';
export const CRPT_FEATURES_OFF = process.env.CRPT_FEATURES_OFF === 'true';
export const RECYCLING_FEATURES_ON = process.env.RECYCLING_FEATURES_ON === 'true';
export const S3_AS_MEDIA_STORAGE = process.env.S3_AS_MEDIA_STORAGE === 'true';

export const TRACING_HEADER = 'x-amzn-trace-id';
export const TRACING_PARAM = 'reqId';

export const LOGGING_HIDE = process.env.LOGGING_HIDE
  ? process.env.LOGGING_HIDE.split(',')
  : [
      'password',
      'newPassword',
      'token',
      'cookie',
      'authorization',
      'cardNumber',
      'cvv',
      'nameOnCard',
      'cardNickname',
      'cardNumberLastDigits',
      'ccAccountToken',
    ];
export const LOGGING_REMOVE = process.env.LOGGING_REMOVE
  ? process.env.LOGGING_REMOVE.split(',')
  : [];
export const ENABLE_SUBSCRIPTION_ORDERS_SYNC_STUB =
  process.env.ENABLE_SUBSCRIPTION_ORDERS_SYNC_STUB === 'true';

export const DISABLE_INDEPENDENT_ORDERS_SYNC_WITH_DISPATCH =
  process.env.DISABLE_INDEPENDENT_ORDERS_SYNC_WITH_DISPATCH === 'true';

export const PERMISSION_REGEXP = /([\s\w:\d-_]+)(\(.+\))?/;

const argvConfig = {
  SKIP_ES_SYNC: 'skip-es',
  SKIP_MIGRATION: 'skip-migration',
  SKIP_MQ_SETUP: 'skip-mq-setup',
  ES_RESYNC_FORCED: 'es-resync',
  NO_AUDIT_LOG: 'skip-audit-log',
  GENERATE_SNAPSHOTS: 'generate-snapshots',
};

const argvFlags = Object.entries(argvConfig).reduce((acc, [key, flag]) => {
  acc[key] = process.argv.includes(`--${flag}`);
  return acc;
}, {});

export const {
  SKIP_ES_SYNC,
  SKIP_MIGRATION,
  SKIP_MQ_SETUP,
  ES_RESYNC_FORCED,
  NO_AUDIT_LOG,
  GENERATE_SNAPSHOTS,
} = argvFlags;
export const SKIP_SEEDING = SKIP_MIGRATION || !['local', 'development', 'test'].includes(NODE_ENV);

// TODO: move this config to tenant and link with localization
export const WEEK_STARTS_FROM_SUNDAY = false;

export const MOCKED_USER_TOKEN_ID = process.env.MOCKED_USER_TOKEN_ID
  ? process.env.MOCKED_USER_TOKEN_ID.trim()
  : null;

export const MOCKED_USER_TOKEN_DATA = process.env.MOCKED_USER_TOKEN_DATA
  ? JSON.parse(process.env.MOCKED_USER_TOKEN_DATA.trim())
  : null;

export const MOCK_BILLING = process.env.MOCK_BILLING === 'true';
export const MOCK_AUTH = process.env.MOCK_AUTH === 'true';
export const MOCK_DISPATCHER = process.env.MOCK_DISPATCHER === 'true';
