import omit from 'lodash/fp/omit.js';
import { toGeoJson } from '../utils/postgis.js';
import { TABLES } from '../consts/tables.js';
import BaseModel from './_base.js';

export default class JobSite extends BaseModel {
  static get tableName() {
    return TABLES.JOB_SITES;
  }

  static get jsonSchema() {
    return {
      type: 'object',

      required: ['id', 'addressLine1', 'city', 'state', 'zip'],

      properties: {
        id: { type: 'integer' },
        name: { type: 'string' },
        addressLine1: { type: 'string', minLength: 1 },
        city: { type: 'string', minLength: 1 },
        state: { type: 'string' },
        zip: { type: 'string', minLength: 5 },
        addressLine2: { type: ['string', null] },
      },
    };
  }

  static get relationMappings() {
    const { ServiceItem } = this.models;

    return {
      serviceItems: {
        relation: BaseModel.HasManyRelation,
        modelClass: ServiceItem,
        join: {
          from: `${this.tableName}.id`,
          to: `${ServiceItem.tableName}.jobSiteId`,
        },
      },
    };
  }

  static async upsert(data, options = { insertMissing: true }) {
    const trx = await this.startTransaction();

    if (data.id) {
      data.id = Number(data.id);
    }

    try {
      data.location = toGeoJson(trx, data.location);

      // fullAddress is autogenerated column
      data = omit(['fullAddress'], data);

      await this.query(trx).upsertGraph(data, options);
      await trx.commit();
    } catch (error) {
      await trx.rollback();
      throw error;
    }
  }
}
