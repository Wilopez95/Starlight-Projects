# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

enum AccessLevel {
  FULL_ACCESS
  MODIFY
  NO_ACCESS
  READ
}

input AddCreditCardInput {
  active: Boolean!
  addressLine1: String!
  addressLine2: String
  cardNickname: String
  cardNumber: String!
  city: String!
  cvv: String!
  expirationDate: String!
  jobSites: [ID]
  nameOnCard: String!
  state: String!
  zip: String!
}

type Address {
  addressLine1: String!
  addressLine2: String
  city: String!
  region: String
  state: String!
  zip: String!
}

input AddressInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  id: Float
  region: String
  state: String!
  zip: String!
}

type AdministrativeDistrict {
  city: String
  county: String
  id: Float!
  level: AdministrativeDistrictLevel!
  name: String!
  state: String!
}

enum AdministrativeDistrictLevel {
  city
  county
  state
}

type AllPermissions {
  entries: [PolicyEntry!]!
  resource: String!
}

enum APRType {
  CUSTOM
  STANDARD
}

type AvailableResourceLogin {
  hasGradingAccess: Boolean
  hasRecyclingAccess: Boolean
  id: String!
  image: String
  label: String!
  loginUrl: String!
  subLabel: String
  targetType: String!
  tenantName: String
  updatedAt: String
}

type Balances {
  availableCredit: Float!
  balance: Float!
  creditLimit: Float!
  nonInvoicedTotal: Float!
  paymentDue: Float!
  prepaidDeposits: Float!
  prepaidOnAccount: Float!
}

input BillableLineItemInput {
  lineItemId: Float!
  materialId: Int = null
}

type BillableService {
  action: BillableServiceAction!
  active: Boolean!
  businessLineId: Float!
  description: String!
  equipmentItemId: Float!
  id: Float!
  materialBasedPricing: Boolean!
  unit: BillableServiceUnit!
}

enum BillableServiceAction {
  dump
  load
}

input BillableServiceCalculateInput {
  billableServiceId: Float
  equipmentItemId: Float
  materialId: Int = null
}

enum BillableServiceUnit {
  daily
  each
  gallon
  hourly
  mile
  minute
  monthly
  none
  ton
  weekly
  yard
}

enum BillingCycle {
  DAILY
  MONTHLY
  NONE
  QUATERLY
  TWENTY_EIGHT_DAYS
  WEEKLY
  YEARLY
}

type BillingJobSite {
  addressLine1: String!
  addressLine2: String
  city: String!
  id: ID!
  state: String!
  zip: String!
}

type Company {
  businessLineId: Float!
  businessTimeFridayEnd: String
  businessTimeFridayStart: String
  businessTimeMondayEnd: String
  businessTimeMondayStart: String
  businessTimeSaturdayEnd: String
  businessTimeSaturdayStart: String
  businessTimeSundayEnd: String
  businessTimeSundayStart: String
  businessTimeThursdayEnd: String
  businessTimeThursdayStart: String
  businessTimeTuesdayEnd: String
  businessTimeTuesdayStart: String
  businessTimeWednesdayEnd: String
  businessTimeWednesdayStart: String
  businessUnitId: Float!
  ccGateway: Gateway
  companyName1: String
  companyName2: String
  createdAt: DateTime!
  currency: Currency
  documentType: String
  email: String
  emailBody: String
  facilityAddress: String
  facilityAddress2: String
  facilityCity: String
  facilityState: String
  facilityZip: String
  fax: String
  financeAPR: Float
  financeMethod: FinanceMethod
  firstInvoice: String
  id: Float!
  jobSiteId: Float
  logoUrl: String
  mailingAddress: String
  mailingAddress2: String
  mailingCity: String
  mailingFrom: String
  mailingReplyTo: String
  mailingSendCopyTo: String
  mailingState: String
  mailingZip: String
  minBalance: String
  minFinanceCharge: String
  phone: String
  printNodeApiKey: String
  region: String
  requireDestinationOnWeightOut: Boolean!
  requireOriginOfInboundLoads: Boolean!
  subject: String
  timezone: String
  updatedAt: DateTime!
  website: String
  yardInstructions: String
}

input CompanyUpdateInput {
  id: Float!
  yardInstructions: String!
}

input ContactPhoneInput {
  extension: String = ""
  number: String = ""
  type: ContactPhoneType!
}

enum ContactPhoneType {
  CELL
  FAX
  HOME
  MAIN
  OTHER
  PAGER
  WORK
}

type CreditCard {
  active: Boolean!
  addressLine1: String
  addressLine2: String
  cardNickname: String
  cardNumberLastDigits: String!
  cardType: String!
  ccAccountId: Int!
  ccAccountToken: String!
  city: String
  customerId: String!
  expDate: String
  expirationDate: String
  expiredLabel: Boolean
  id: ID!
  isAutopay: Boolean
  jobSites: [BillingJobSite!]
  nameOnCard: String
  paymentGateway: String
  state: String
  zip: String
}

input CreditCardFilter {
  activeOnly: Boolean = true
  customerId: Int = null
  jobSiteId: Int = null
  relevantOnly: Boolean = true
}

enum Currency {
  CAD
  GBP
  USD
}

type CustomerAddress {
  addressLine1: String
  addressLine2: String
  city: String
  state: String
  zip: String
}

input CustomerAddressInput {
  addressLine1: String = ""
  addressLine2: String = ""
  city: String = ""
  state: String = ""
  zip: String = ""
}

input CustomerContactInput {
  active: Boolean!
  email: String
  firstName: String!
  isMain: Boolean!
  lastName: String!
  phones: [ContactPhoneInput!] = []
  title: String
}

input CustomerFilter {
  activeOnly: Boolean
  businessUnitId: Float
  customerGroupId: Float
  filterByHaulerSrn: [String!]
  filterByOnAccount: Boolean
  filterBySelfServiceOrderAllowed: Boolean
  filterByState: [HaulingCustomerStatus!]
  limit: Float
  query: String
  skip: Float
  sortBy: Float
  sortOrder: Float
}

type CustomerTruck {
  active: Boolean!
  createdAt: DateTime!
  customerId: Float!
  description: String
  emptyWeight: Float
  emptyWeightSource: String
  emptyWeightTimestamp: DateTime
  emptyWeightType: MeasurementType
  emptyWeightUnit: MeasurementUnit
  emptyWeightUser: User
  id: Float!
  licensePlate: String
  truckNumber: String!
  type: CustomerTruckTypes!
  updatedAt: DateTime!
}

type CustomerTruckDeleteResult {
  result: Boolean!
}

input CustomerTruckFilter {
  active: Boolean = null
  customerId: Int = null
  description: String = null
  search: SearchBodyInput = null
}

type CustomerTruckForOrderCreate {
  active: Boolean!
  createdAt: DateTime!
  customerId: Float!
  description: String
  emptyWeight: Float
  emptyWeightSource: String
  emptyWeightTimestamp: DateTime
  emptyWeightType: MeasurementType
  emptyWeightUnit: MeasurementUnit
  emptyWeightUser: User
  id: Float!
  isInUse: Boolean!
  licensePlate: String
  truckNumber: String!
  type: CustomerTruckTypes!
  updatedAt: DateTime!
}

type CustomerTruckIndexed {
  active: Boolean!
  createdAt: DateTime!
  customerId: Float!
  description: String
  emptyWeight: Float
  emptyWeightSource: String
  emptyWeightTimestamp: DateTime
  emptyWeightType: MeasurementType
  emptyWeightUnit: MeasurementUnit
  emptyWeightUser: User
  highlight: Highlight
  id: Float!
  licensePlate: String
  truckNumber: String!
  type: CustomerTruckTypes!
  updatedAt: DateTime!
}

input CustomerTruckIndexedFilter {
  activeOnly: Boolean
  customerId: Float
  search: String
}

input CustomerTruckInput {
  active: Boolean!
  customerId: Int!
  description: String
  emptyWeight: Float
  emptyWeightSource: String
  emptyWeightTimestamp: DateTime
  emptyWeightType: MeasurementType
  emptyWeightUnit: MeasurementUnit
  emptyWeightUser: String
  licensePlate: String
  truckNumber: String!
  type: CustomerTruckTypes!
}

type CustomerTrucksListIndexed {
  data: [CustomerTruckIndexed!]!
  total: Float!
}

type CustomerTrucksResponse {
  data: [CustomerTruck!]!
  total: Float!
}

enum CustomerTruckTypes {
  DUMPTRUCK
  ROLLOFF
  TRACTORTRAILER
}

input CustomerTruckUpdateInput {
  active: Boolean!
  customerId: Int!
  description: String
  emptyWeight: Float
  emptyWeightSource: String
  emptyWeightTimestamp: DateTime
  emptyWeightType: MeasurementType
  emptyWeightUnit: MeasurementUnit
  emptyWeightUser: String
  id: Float!
  licensePlate: String
  truckNumber: String!
  type: CustomerTruckTypes!
}

enum CustomerType {
  COMMERCIAL
  WALKUP
}

input CustomerUpdateInput {
  id: Float!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DestinationFilter {
  activeOnly: Boolean = true
}

type DestinationsResponse {
  data: [HaulingDestination!]!
}

input EditCreditCardInput {
  active: Boolean!
  addressLine1: String!
  addressLine2: String
  cardNickname: String
  city: String!
  expirationDate: String!
  jobSites: [ID]
  nameOnCard: String!
  state: String!
  zip: String!
}

type Equipment {
  active: Boolean!
  businessLineId: Float!
  closedTop: Boolean
  containerTareWeightRequired: Boolean!
  customerOwned: Boolean
  description: String!
  emptyWeight: Float
  height: Float
  id: Float!
  length: Float
  shortDescription: String
  size: Float
  type: EquipmentType!
  width: Float
}

input EquipmentFilterInput {
  activeOnly: Boolean
  businessUnitId: Float
  customerGroupId: Float
  limit: Float
  query: String
  skip: Float
  sortBy: Float
  sortOrder: Float
}

input EquipmentInput {
  active: Boolean!
  businessLineId: Float!
  closedTop: Boolean = false
  containerTareWeightRequired: Boolean!
  customerOwned: Boolean
  description: String!
  emptyWeight: Float = 0
  height: Float = 0
  length: Float = 0
  shortDescription: String
  size: Float = 0
  type: EquipmentType!
  width: Float = 0
}

type EquipmentsResponse {
  data: [Equipment!]!
}

enum EquipmentType {
  portableToilet
  rollOffContainer
  unspecified
  wasteContainer
}

input EquipmentUpdateInput {
  active: Boolean!
  businessLineId: Float!
  closedTop: Boolean = false
  containerTareWeightRequired: Boolean!
  customerOwned: Boolean
  description: String!
  emptyWeight: Float = 0
  height: Float = 0
  id: Float!
  length: Float = 0
  shortDescription: String
  size: Float = 0
  type: EquipmentType!
  width: Float = 0
}

"""GeoJSON Feature as a Scalar"""
scalar Feature

type FileDeleteResult {
  result: String!
}

enum FinanceMethod {
  days
  periods
}

enum Gateway {
  CardConnect
}

"""GeoJSON Geometry as a Scalar"""
scalar Geometry

input GradingPayloadInput {
  images: [OrderImageInput!]
  materialsDistribution: [OrderMaterialDistributionInput!]!
  miscellaneousMaterialsDistribution: [OrderMiscellaneousMaterialDistributionInput!]!
  orderId: Float!
}

type HaulingBillableItem {
  active: Boolean!
  businessLineId: Float!
  description: String!
  id: Float!
  materialBasedPricing: Boolean!
  materialIds: [Float!]
  materials: [HaulingMaterial!]
  originalId: Float!
  type: HaulingBillableItemType!
  unit: HaulingBillableItemUnit!
}

input HaulingBillableItemFilterInput {
  active: Boolean!
  types: [HaulingBillableItemType!]!
}

enum HaulingBillableItemType {
  LINE
  MISCELLANIES
}

enum HaulingBillableItemUnit {
  DAY
  EACH
  GALLON
  HOUR
  MILE
  MIN
  MONTH
  NONE
  ORDER
  TON
  WEEK
  YARD
}

input HaulingCalculateRatesInput {
  billableLineItems: [BillableLineItemInput!]
  billableService: BillableServiceCalculateInput
  customRatesGroupId: Float
  type: HaulingPriceGroupsResultLevel!
}

type HaulingCalculateRatesResult {
  customRates: HaulingCustomRates
  globalRates: HaulingGlobalRates
}

type HaulingCompanyGeneralSettings {
  clockIn: Boolean!
  id: Float!
  timeZoneName: String!
  unit: HaulingMeasurementUnit!
}

type HaulingCustomer {
  active: Boolean!
  addFinanceCharges: Boolean!
  alternateId: String!
  aprType: String!
  attachMediaPref: Boolean!
  attachTicketPref: Boolean!
  balances: Balances
  billingAddress: CustomerAddress!
  billingCycle: BillingCycle
  businessName: String
  canTareWeightRequired: Boolean
  commercial: Boolean
  creditLimit: Float!
  customerGroupId: Float!
  email: String!
  financeCharge: Float
  firstName: String!
  generalNote: String!
  gradingNotification: Boolean
  gradingRequired: Boolean
  haulerSrn: String
  id: Float!
  invoiceConstruction: String!
  invoiceEmails: [String!]
  jobSiteRequired: Boolean
  lastName: String!
  mailingAddress: CustomerAddress!
  mainEmail: String!
  mainFirstName: String!
  mainJobTitle: String!
  mainLastName: String!
  mainPhoneNumbers: [HaulingPhone!]!
  notificationEmails: [String!]
  onAccount: Boolean
  onHold: Boolean!
  paymentTerms: String!
  phoneNumbers: [HaulingPhone!]!
  popupNote: String
  poRequired: Boolean
  saleRepresentative: User
  saleRepresentativeId: String
  salesId: String!
  selfServiceOrderAllowed: Boolean
  sendInvoicesByEmail: Boolean!
  sendInvoicesByPost: Boolean!
  signatureRequired: Boolean!
  statementEmails: [String!]
  status: HaulingCustomerStatus!
  type: CustomerType!
  walkup: Boolean!
  workOrderRequired: Boolean
}

type HaulingCustomerGroup {
  active: Boolean!
  description: String!
  id: Float!
  type: HaulingCustomerGroupType!
}

input HaulingCustomerGroupFilter {
  activeOnly: Boolean = null
  type: HaulingCustomerGroupType
}

enum HaulingCustomerGroupType {
  COMMERCIAL
  NON_COMMERCIAL
  WALKUP
}

input HaulingCustomerInput {
  active: Boolean!
  addFinancialCharges: Boolean!
  allowSelfServiceOrders: Boolean!
  alternateID: String
  apr: APRType
  aprCharge: Float = 0
  billingAddress: CustomerAddressInput!
  billingCycle: BillingCycle
  billingSameAsMailing: Boolean!
  businessName: String!
  creditLimit: Float = 0
  email: String
  emailForInvoices: String = null
  generalNotes: String = ""
  gradingNotification: Boolean!
  groupId: Float!
  haulerSrn: String = null
  invoiceConstruction: InvoiceConstruction
  mailingAddress: CustomerAddressInput!
  mainContact: CustomerContactInput!
  onAccount: Boolean!
  paymentTerm: PaymentTerm
  phones: [ContactPhoneInput!] = []
  popupNotes: String = ""
  requireCanTareWeight: Boolean!
  requireGrading: Boolean!
  requireJobSite: Boolean!
  requirePONumber: Boolean!
  requireWONumber: Boolean!
  saleRepresentativeId: String = null
  sendInvoiceByEmail: Boolean!
  sendInvoiceByPost: Boolean!
}

type HaulingCustomerJobSite {
  active: Boolean!
  address: CustomerAddress!
  contactId: Float
  fullAddress: String!
  id: Float!
  jobSite: HaulingJobSite!
  location: Point!
  originalId: Float
  popupNote: String
  poRequired: Boolean
}

input HaulingCustomerJobSiteFilterInput {
  activeOnly: Boolean
  businessUnitId: Float
  customerGroupId: Float
  customerId: Float!
  limit: Float
  query: String
  skip: Float
  sortBy: Float
  sortOrder: Float
}

input HaulingCustomerJobSiteInput {
  active: Boolean
  customerId: Float!
  jobSiteId: Float!
  PONumberRequired: Boolean
  popupNote: String
  poRequired: Boolean
}

input HaulingCustomerJobSitePairByIdFilterInput {
  customerId: Float!
  jobSiteId: Float!
}

input HaulingCustomerJobSitePairFilterInput {
  customerId: Float!
  jobSiteId: Float!
}

type HaulingCustomersResponse {
  data: [HaulingCustomer!]!
}

enum HaulingCustomerStatus {
  active
  onHold
}

type HaulingCustomRates {
  customRatesLineItems: [HaulingRatesLineItemResult!]
  customRatesService: HaulingRatesServiceResult
}

type HaulingDestination {
  active: Boolean!
  addressLine1: String!
  addressLine2: String
  businessUnitId: String!
  city: String!
  description: String!
  geojson: Feature
  id: Float!
  state: String!
  zip: String!
}

input HaulingDestinationInput {
  active: Boolean!
  addressLine1: String!
  addressLine2: String
  businessUnitId: Float
  city: String!
  description: String!
  geojson: Feature = null
  state: String!
  zip: String!
}

input HaulingDestinationUpdateInput {
  active: Boolean!
  addressLine1: String!
  addressLine2: String
  businessUnitId: Float
  city: String!
  description: String!
  geojson: Feature = null
  id: Float!
  state: String!
  zip: String!
}

type HaulingDriver {
  active: Boolean!
  businessUnits: [HaulingDriverBU!]!
  description: String!
  email: String!
  id: Int!
  licenseNumber: String!
  licenseType: String!
  phone: String
  photoUrl: String
  truckId: Int!
}

type HaulingDriverBU {
  id: Int!
  name: String!
}

type HaulingGlobalRates {
  globalRatesLineItems: [HaulingRatesLineItemResult!]
  globalRatesService: HaulingRatesServiceResult!
}

type HaulingJobSite {
  address: HaulingJobSiteAddress!
  alleyPlacement: Boolean!
  cabOver: Boolean!
  fullAddress: String
  id: Float!
  location: Geometry!
  popupNote: String
}

type HaulingJobSiteAddress {
  addressLine1: String!
  addressLine2: String
  city: String!
  region: String
  state: String!
  zip: String!
}

input HaulingJobSiteAddressInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  region: String!
  state: String!
  zip: String!
}

input HaulingJobSiteInput {
  address: HaulingJobSiteAddressInput!
  alleyPlacement: Boolean!
  cabOver: Boolean!
  location: Geometry!
}

type haulingJobSitesResponse {
  data: [HaulingJobSite!]!
}

input HaulingJobSiteUpdateInput {
  address: HaulingJobSiteAddressInput!
  alleyPlacement: Boolean!
  cabOver: Boolean!
  id: Float!
  location: Geometry!
}

type HaulingMaterial {
  active: Boolean!
  code: String
  description: String!
  id: Float!
  misc: Boolean!
  originalId: Float!
  recycle: Boolean!
  units: String
  useForDump: Boolean!
  useForLoad: Boolean!
  yard: Boolean!
}

input HaulingMaterialFilterInput {
  activeOnly: Boolean
  businessUnitId: Float
  customerGroupId: Float
  equipmentItems: Boolean!
  limit: Float
  query: String
  skip: Float
  sortBy: Float
  sortOrder: Float
  useForDump: Boolean
  useForLoad: Boolean
}

input HaulingMaterialInput {
  active: Boolean!
  code: String
  description: String!
  misc: Boolean!
  recycle: Boolean!
  useForDump: Boolean!
  useForLoad: Boolean!
  useForYard: Boolean!
}

type HaulingMaterialsResponse {
  data: [HaulingMaterial!]!
}

input HaulingMaterialUpdateInput {
  active: Boolean!
  code: String
  description: String!
  id: Float!
  misc: Boolean!
  recycle: Boolean!
  useForDump: Boolean!
  useForLoad: Boolean!
  useForYard: Boolean!
}

enum HaulingMeasurementUnit {
  imperial
  metric
  us
}

"""A Scalar that represents order history"""
scalar HaulingOrderHistory

type HaulingOrigin {
  active: Boolean!
  businessUnitId: String!
  description: String!
  id: Float!
  originDistricts: [HaulingOriginDistrict!]!
}

type HaulingOriginDistrict {
  city: String
  county: String
  id: Float!
  originId: Float!
  state: String!
  taxDistrictId: Int
}

input HaulingOriginDistrictInput {
  city: String
  county: String
  state: String!
  taxDistrictId: Int = null
}

type HaulingPhone {
  extension: String
  number: String
  textOnly: Boolean!
  type: HaulingPhoneType!
}

enum HaulingPhoneType {
  CELL
  FAX
  HOME
  MAIN
  OTHER
  PAGER
  WORK
}

type HaulingPriceGroup {
  description: String!
  id: Float!
}

input HaulingPriceGroupFilterInput {
  customerId: Float!
  customerJobSiteId: Int = null
}

type HaulingPriceGroupsResult {
  customRatesGroups: [HaulingPriceGroup!]
  level: HaulingPriceGroupsResultLevel!
  selectedId: Float
}

enum HaulingPriceGroupsResultLevel {
  custom
  global
}

type HaulingProject {
  customerJobSiteId: Float!
  description: String!
  endDate: String
  id: Float!
  originalId: Float!
  permitRequired: Boolean!
  poRequired: Boolean!
  startDate: String
}

input HaulingProjectFilter {
  customerJobSiteId: Int
}

type HaulingRatesLineItemResult {
  id: Float!
  lineItemId: Float!
  materialId: Int
  price: Float!
}

type HaulingRatesServiceResult {
  id: Float!
  price: Float!
}

type HaulingServiceDaysAndHours {
  businessUnitId: Float!
  dayOfWeek: Float!
  endTime: String
  id: Float!
  startTime: String
}

input HaulingServiceDaysAndHoursFilter {
  businessUnitId: Float
  dayOfWeek: Float
  endTime: String
  id: Float
  startTime: String
}

input HaulingServiceDaysAndHoursInput {
  businessUnitId: Float
  dayOfWeek: Float
  endTime: String
  id: Float
  startTime: String
}

input HaulingServiceDaysAndHoursUpdateInput {
  businessUnitId: Float
  dayOfWeek: Float
  endTime: String
  id: Float
  startTime: String
}

type HaulingTaxDistrict {
  active: Boolean!
  bbox: [Float!]
  businessConfiguration: [TaxBusinessConfiguration!]
  businessLineTaxesIds: [Float!]
  createdAt: String!
  description: String!
  districtCode: String
  districtName: String
  districtType: TaxDistrictType!
  id: Float!
  includeNationalInTaxableAmount: Boolean!
  taxDescription: String
  taxesPerCustomerType: Boolean!
  updatedAt: String!
  useGeneratedDescription: Boolean!
  userId: String!
}

"""Key value object"""
scalar Highlight

enum InvoiceConstruction {
  BY_ADDRESS
  BY_CUSTOMER
  BY_ORDER
}

input JobSiteFilter {
  active: Boolean = null
}

input JobSiteInput {
  active: Boolean = true
  city: String!
  county: String
  customerId: Float!
  geojson: Feature!
  lineAddress1: String!
  lineAddress2: String!
  state: String!
  zip: String!
}

type LineItemExclusions {
  lineItems: [Float!]!
  thresholds: [Float!]!
}

type LineItemTax {
  application: TaxApplication
  calculation: TaxCalculation!
  exclusions: LineItemExclusions
  group: Boolean!
  nonGroup: NonGroupLineItemTaxValue
  value: String
}

type ListPermissionsResult {
  data: [Permission!]!
  total: Float!
}

type ListResourcesResult {
  data: [Resource!]!
  total: Float!
}

type ListRolesResult {
  data: [Role!]!
  total: Float!
}

type ListUsersResult {
  data: [User!]!
  total: Float!
}

"""User information associated with provided access token"""
type Me {
  email: String
  firstName: String
  id: String!
  lastName: String
  name: String
  permissions: [String!]!
  resource: String
  tenantId: ID
  tenantName: String
}

enum MeasurementType {
  HARDWARE
  MANUAL
}

enum MeasurementUnit {
  GRAM
  KILOGRAM
  TON
}

type Mutation {
  approveOrders(ids: [Int!]): Boolean!
  bulkRemoveOrder(ids: [Int!]!): Boolean!
  calculateHaulingRates(input: HaulingCalculateRatesInput!): HaulingCalculateRatesResult

  """Complete walkup customer order"""
  completeWalkUpCustomerOrder(id: Int!): Boolean
  createAutoOrderBillableItems(billableItemsIds: [Int!]!, distributionMaterials: [Int!]!, materialId: Int, priceGroupId: Int!, type: OrderType!): [OrderBillableItem!]
  createCreditCard(customerId: Int!, data: AddCreditCardInput!): CreditCard
  createCustomerTruck(data: CustomerTruckInput!, filter: CustomerTruckFilter = {active: null, customerId: null, description: null, search: null}): CustomerTruck
  createDestination(data: HaulingDestinationInput!): HaulingDestination
  createEquipment(data: EquipmentInput!): Equipment
  createHaulingCustomer(data: HaulingCustomerInput!): HaulingCustomer!
  createHaulingCustomerJS(data: HaulingCustomerJobSiteInput!): HaulingCustomerJobSite!
  createhaulingJobSite(data: HaulingJobSiteInput!): HaulingJobSite
  createHaulingJobSiteOnCore(data: JobSiteInput!): HaulingJobSite
  createHaulingMaterial(data: HaulingMaterialInput!): HaulingMaterial
  createHaulingProject(input: ProjectInput!): HaulingProject
  createOrder(data: OrderInput!, filter: OrderFilterInput = {customerId: null, customerJobSiteId: null, customerTruckId: null, jobSiteId: null, projectIds: [], status: null, WONumber: null}): Order
  createOrderBillableItems(billableItemsIds: [Int!]!, materialId: Int, priceGroupId: Int!, type: OrderType!): [OrderBillableItem!]
  createOrigin(data: OriginInput!): HaulingOrigin
  createPermission(data: PermissionInput!): Permission!
  createResource(data: ResourceInput!): Resource!
  createRole(roleData: RoleInput!): Role!
  createScale(data: ScaleInput!, filter: ScaleFilterInput = {connectionStatus: null}): Scale
  createServiceDaysAndHour(data: HaulingServiceDaysAndHoursInput!): HaulingServiceDaysAndHours
  createUser(userData: UserCreateInput!): User!
  deleteCustomerTruck(filter: CustomerTruckFilter = {active: null, customerId: null, description: null, search: null}, id: Int!): CustomerTruckDeleteResult!
  deleteFile(fileUrl: String!): FileDeleteResult!
  deleteOrder(filter: OrderFilterInput = {customerId: null, customerJobSiteId: null, customerTruckId: null, jobSiteId: null, projectIds: [], status: null, WONumber: null}, id: Int!): OrderDeleteResult!
  deletePermission(id: String!): PermissionDeleteResult!
  deleteResource(srn: String!): ResourceDeleteResult!
  deleteRole(id: String!): Boolean!
  deleteScale(filter: ScaleFilterInput = {connectionStatus: null}, id: Int!): ScaleDeleteResult!
  deleteUser(id: String!): Boolean!
  fillOrderBillableItemsWithPrices(materialId: Int, orderBillableItems: [OrderBillableItemInput!]!, priceGroupId: Int!, type: OrderType!): [OrderBillableItem!]
  finalizeOrders(ids: [Int!]): Boolean!
  gradingOrder(gradingPayload: GradingPayloadInput!): Boolean!

  """Change order status to APPROVED"""
  makeOrderApproved(data: OrderApprovedRequestInput, id: Int!): Boolean

  """Change order status to COMPLETED"""
  makeOrderCompleted(data: OrderCompletedRequestInput, id: Int!): Boolean

  """Change order status to FINALIZED"""
  makeOrderFinalized(id: Int!): Boolean

  """Change order status to INVOICED"""
  makeOrderInvoiced(id: Int!): Boolean!

  """Change order status to IN_YARD"""
  makeOrderInYard(id: Int!): Boolean!

  """Change order status to LOAD"""
  makeOrderLoaded(id: Int!): Boolean!

  """Change order status to PAYMENT"""
  makeOrderPayment(id: Int!): Boolean

  """Change order status to WEIGHT_OUT"""
  makeOrderWeightOut(id: Int!): Boolean!
  recoverCustomerTruck(filter: CustomerTruckFilter = {active: null, customerId: null, description: null, search: null}, id: Int): CustomerTruck!
  recoverOrder(filter: OrderFilterInput = {customerId: null, customerJobSiteId: null, customerTruckId: null, jobSiteId: null, projectIds: [], status: null, WONumber: null}, id: Int): Order!
  recoverScale(filter: ScaleFilterInput = {connectionStatus: null}, id: Int): Scale!

  """Send pdf weight ticket via email"""
  sendPdfWeightTicketViaEmail(email: String!, id: Int!): Boolean!

  """
  send populateElasticSearchIndex event to recycling:populate-elastic-search-index in Recycling
  """
  sendPopulateElasticSearchIndexInRecycling: Boolean!

  """send populateEntity event to recycling:populate-entity in Recycling"""
  sendPopulateEntityInRecycling(populateEvent: PopulateEntityEvent!): Boolean!
  setCompanyYardInstructions(yardInstructions: String!): Company!
  updateCompany(data: CompanyUpdateInput!): Company!
  updateCreditCard(data: EditCreditCardInput!, id: ID!): CreditCard
  updateCustomerTruck(data: CustomerTruckUpdateInput!, filter: CustomerTruckFilter = {active: null, customerId: null, description: null, search: null}): CustomerTruck!
  updateDestination(data: HaulingDestinationUpdateInput!): HaulingDestination
  updateEquipment(data: EquipmentUpdateInput!): Equipment
  updateHaulingCustomer(data: CustomerUpdateInput!): HaulingCustomer
  updatehaulingJobSite(data: HaulingJobSiteUpdateInput!): HaulingJobSite
  updateHaulingMaterial(data: HaulingMaterialUpdateInput!): HaulingMaterial
  updateOrder(data: OrderUpdateInput!, filter: OrderFilterInput = {customerId: null, customerJobSiteId: null, customerTruckId: null, jobSiteId: null, projectIds: [], status: null, WONumber: null}): Order!
  updateOrigin(data: OriginUpdateInput!): HaulingOrigin
  updatePermission(data: PermissionUpdateInput!): Permission!
  updateResource(data: ResourceUpdateInput!): Resource!
  updateRole(id: String!, roleData: RoleInput!): Role!
  updateScale(data: ScaleUpdateInput!, filter: ScaleFilterInput = {connectionStatus: null}): Scale!
  updateServiceDaysAndHour(data: HaulingServiceDaysAndHoursUpdateInput!): HaulingServiceDaysAndHours
  updateUser(id: String!, userData: UserUpdateInput!): User!
  uploadFile(file: Upload!, pathEntries: [String!] = []): UploadFileResponse!
}

type NonGroupLineItemTaxValue {
  lineItems: [NonGroupTaxValue!]!
  thresholds: [NonGroupTaxValue!]!
}

type NonGroupTaxValue {
  id: Float!
  value: String!
}

"""ObjectLiteralScalar"""
scalar ObjectLiteralScalar

type OnTheWayNumber {
  customerBusinessName: String!
  WONumber: String!
}

type Order {
  amount: Float!
  arrivedAt: DateTime
  beforeTaxesTotal: Float!
  billableItems: [OrderBillableItem!]!
  billableService: BillableService
  bypassScale: Boolean!
  canTare: Float
  checkNumber: String
  container: Equipment
  containerId: Float
  createdAt: DateTime!
  creditCardId: String
  customer: HaulingCustomer!
  customerId: Float!
  customerJobSite: HaulingCustomerJobSite
  customerJobSiteId: Float
  customerTruck: CustomerTruck
  customerTruckId: Float
  deleteDate: DateTime
  departureAt: DateTime
  destination: HaulingDestination
  destinationId: Float
  grandTotal: Float!
  hasWeightTicket: Boolean!
  haulingOrderId: Int
  id: Float!
  images: [OrderImage!]
  initialOrderTotal: Float!
  isAch: Boolean!
  isSelfService: Boolean
  jobSite: HaulingCustomerJobSite
  jobSiteId: Float
  material: HaulingMaterial
  materialId: Float
  materialsDistribution: [OrderMaterialDistribution!]!
  minimalWeight: Float
  miscellaneousMaterialsDistribution: [OrderMiscellaneousMaterialDistribution!]!
  note: String
  originDistrict: HaulingOriginDistrict
  originDistrictId: Float
  owner: String
  paymentMethod: PaymentMethodType
  PONumber: String
  priceGroup: HaulingPriceGroup
  priceGroupId: Float
  project: HaulingProject
  projectId: Float
  status: OrderStatus!
  taxDistricts: [HaulingTaxDistrict!]
  taxTotal: Float!
  truckTare: Float
  type: OrderType!
  updatedAt: DateTime!
  useTare: Boolean
  weightIn: Float
  weightInSource: String
  weightInTimestamp: DateTime
  weightInType: MeasurementType
  weightInUnit: MeasurementUnit
  weightInUser: User
  weightOut: Float
  weightOutSource: String
  weightOutTimestamp: DateTime
  weightOutType: MeasurementType
  weightOutUnit: MeasurementUnit
  weightOutUser: User
  weightTicketAttachedAt: DateTime
  weightTicketCreator: User
  weightTicketCreatorId: String
  weightTicketPrivateUrl: String
  weightTicketUrl: String
  WONumber: String
}

input OrderApprovedRequestInput {
  reason: String
}

type OrderBillableItem {
  applySurcharges: Boolean
  auto: Boolean!
  billableItem: HaulingBillableItem
  billableItemId: Int
  createdAt: DateTime!
  customRatesGroupLineItemsId: Float
  customRatesGroupServicesId: Int
  customRatesGroupThresholdsId: Int
  globalRatesLineItemsId: Float
  globalRatesServiceId: Int
  globalRatesThresholdsId: Int
  material: HaulingMaterial
  materialId: Float
  orderId: Float
  price: Float!
  priceSource: String
  priceSourceType: OrderPriceSourceType
  quantity: Float!
  readonly: Boolean!
  thresholdId: Int
  type: OrderBillableItemType!
  updatedAt: DateTime!
  uuid: String!
}

input OrderBillableItemInput {
  applySurcharges: Boolean
  auto: Boolean
  billableItemId: Float = null
  customRatesGroupLineItemsId: Float
  customRatesGroupServicesId: Int
  customRatesGroupThresholdsId: Int
  globalRatesLineItemsId: Float
  globalRatesServiceId: Int
  globalRatesThresholdsId: Int
  materialId: Float = null
  price: Float!
  priceSource: String
  priceSourceType: OrderPriceSourceType
  quantity: Float!
  readonly: Boolean = false
  thresholdId: Float
  type: OrderBillableItemType!
  uuid: String!
}

enum OrderBillableItemType {
  FEE
  LINE
  MATERIAL
  MISCELLANIES
}

input OrderCompletedRequestInput {
  overrideCreditLimit: Boolean
  reason: String
}

type OrderDeleteResult {
  result: Boolean!
}

input OrderFilterInput {
  customerId: Int = null
  customerJobSiteId: Int = null
  customerTruckId: Int = null
  jobSiteId: Int = null
  projectIds: [Int!] = []
  status: OrderStatus = null
  WONumber: String = null
}

type OrderImage {
  filename: String!
  url: String!
}

input OrderImageInput {
  filename: String!
  url: String!
}

type OrderIndexed {
  amount: Float!
  arrivedAt: DateTime
  beforeTaxesTotal: Float!
  billableItems: [OrderBillableItem!]!
  billableService: BillableService
  bypassScale: Boolean!
  canTare: Float
  checkNumber: String
  container: Equipment
  containerId: Float
  createdAt: DateTime!
  creditCardId: String
  customer: HaulingCustomer!
  customerId: Float!
  customerJobSite: HaulingCustomerJobSite
  customerJobSiteId: Float
  customerTruck: CustomerTruck
  customerTruckId: Float
  deleteDate: DateTime
  departureAt: DateTime
  destination: HaulingDestination
  destinationId: Float
  graded: Boolean
  grandTotal: Float!
  hasWeightTicket: Boolean
  haulingOrderId: Int
  highlight: Highlight
  id: Float!
  images: [OrderImage!]
  initialOrderTotal: Float!
  isAch: Boolean!
  isSelfService: Boolean
  jobSite: HaulingCustomerJobSite
  jobSiteId: Float
  material: HaulingMaterial
  materialId: Float
  materialsDistribution: [OrderMaterialDistribution!]!
  minimalWeight: Float
  miscellaneousMaterialsDistribution: [OrderMiscellaneousMaterialDistribution!]!
  netWeight: Float
  note: String
  originDistrict: HaulingOriginDistrict
  originDistrictId: Float
  owner: String
  paymentMethod: PaymentMethodType
  PONumber: String
  priceGroup: HaulingPriceGroup
  priceGroupId: Float
  project: HaulingProject
  projectId: Float
  status: OrderStatus!
  taxDistricts: [HaulingTaxDistrict!]
  taxTotal: Float!
  truckTare: Float
  type: OrderType!
  updatedAt: DateTime!
  useTare: Boolean
  weightIn: Float
  weightInSource: String
  weightInTimestamp: DateTime
  weightInType: MeasurementType
  weightInUnit: MeasurementUnit
  weightInUser: User
  weightOut: Float
  weightOutSource: String
  weightOutTimestamp: DateTime
  weightOutType: MeasurementType
  weightOutUnit: MeasurementUnit
  weightOutUser: User
  weightTicketAttachedAt: DateTime
  weightTicketCreator: User
  weightTicketCreatorId: String
  weightTicketPrivateUrl: String
  weightTicketUrl: String
  WONumber: String
}

input OrderInput {
  amount: Float
  arrivedAt: DateTime
  bypassScale: Boolean
  canTare: Float
  checkNumber: String
  containerId: Float
  creditCardId: String
  customerId: Int
  customerJobSiteId: Int
  customerTruckId: Int
  departureAt: DateTime
  destinationId: Int
  isAch: Boolean
  isSelfService: Boolean
  jobSiteId: Float
  materialId: Int
  note: String
  orderBillableItems: [OrderBillableItemInput!]
  originDistrictId: Int
  paymentMethod: PaymentMethodType
  PONumber: String
  priceGroupId: Int
  projectId: Int
  taxTotal: Float
  truckTare: Float
  type: OrderType
  useTare: Boolean
  weightIn: Float
  weightInSource: String
  weightInTimestamp: DateTime
  weightInType: MeasurementType
  weightInUnit: MeasurementUnit
  weightInUser: String
  weightOut: Float
  weightOutSource: String
  weightOutTimestamp: DateTime
  weightOutType: MeasurementType
  weightOutUnit: MeasurementUnit
  weightOutUser: String
  WONumber: String
}

type OrderMaterialDistribution {
  createdAt: DateTime!
  material: HaulingMaterial
  materialId: Float!
  orderId: Float!
  recycle: Boolean
  updatedAt: DateTime!
  uuid: String!
  value: Float!
}

input OrderMaterialDistributionInput {
  materialId: Float!
  uuid: String!
  value: Float!
}

type OrderMiscellaneousMaterialDistribution {
  createdAt: DateTime!
  material: HaulingMaterial!
  materialId: Float!
  orderId: Float!
  quantity: Float!
  recycle: Boolean
  updatedAt: DateTime!
  uuid: String!
}

input OrderMiscellaneousMaterialDistributionInput {
  materialId: Float!
  quantity: Float!
  uuid: String!
}

enum OrderPriceSourceType {
  GLOBAL_RACK_RATES
  MANUAL
  NO_PRICE
  PRICE_GROUP
}

input OrdersIndexedFilter {
  createdAt: [RangeFilter!]
  customerId: [Int!]
  graded: Boolean
  haulingOrderId: [Int!]
  materialId: [Int!]
  owner: [String!]
  paymentMethod: [PaymentMethodType!]
  PONumber: [String!]
  search: String
  status: [OrderStatus!]
  type: [OrderType!]
}

type OrdersIndexedList {
  data: [OrderIndexed!]!
  total: Float!
}

type OrdersIndexedResponse {
  data: [OrderIndexed!]!
  total: Float!
}

type OrdersResponse {
  data: [Order!]!
  total: Float!
}

enum OrderStatus {
  APPROVED
  COMPLETED
  FINALIZED
  IN_YARD
  INVOICED
  LOAD
  ON_THE_WAY
  PAYMENT
  WEIGHT_OUT
}

type OrderTotalByStatus {
  all: Int
  APPROVED: Int
  COMPLETED: Int
  FINALIZED: Int
  IN_YARD: Int
  INVOICED: Int
  LOAD: Int
  ON_THE_WAY: Int
  PAYMENT: Int
  WEIGHT_OUT: Int
}

enum OrderType {
  DUMP
  LOAD
  NON_SERVICE
}

input OrderUpdateInput {
  amount: Float
  arrivedAt: DateTime
  bypassScale: Boolean
  canTare: Float
  checkNumber: String
  containerId: Float
  creditCardId: String
  customerId: Int
  customerJobSiteId: Int
  customerTruckId: Int
  departureAt: DateTime
  destinationId: Int
  id: Float!
  images: [OrderImageInput!]
  isAch: Boolean
  isSelfService: Boolean
  jobSiteId: Float
  materialId: Int
  materialsDistributionInput: [OrderMaterialDistributionInput!]
  miscellaneousMaterialsDistributionInput: [OrderMiscellaneousMaterialDistributionInput!]
  note: String
  orderBillableItems: [OrderBillableItemInput!]
  originDistrictId: Int
  paymentMethod: PaymentMethodType
  PONumber: String
  priceGroupId: Int
  projectId: Int
  taxTotal: Float
  truckTare: Float
  type: OrderType
  useTare: Boolean
  weightIn: Float
  weightInSource: String
  weightInTimestamp: DateTime
  weightInType: MeasurementType
  weightInUnit: MeasurementUnit
  weightInUser: String
  weightOut: Float
  weightOutSource: String
  weightOutTimestamp: DateTime
  weightOutType: MeasurementType
  weightOutUnit: MeasurementUnit
  weightOutUser: String
  WONumber: String
}

input OriginFilter {
  activeOnly: Boolean = true
}

input OriginInput {
  active: Boolean!
  businessUnitId: Float
  description: String!
  originDistricts: [HaulingOriginDistrictInput!]!
}

type OriginsResponse {
  data: [HaulingOrigin!]!
}

input OriginUpdateInput {
  active: Boolean!
  businessUnitId: Float
  description: String!
  id: Float!
  originDistricts: [HaulingOriginDistrictInput!]!
}

input PaginationInput {
  page: Float!
  perPage: Float!
}

enum PaymentMethodType {
  CASH
  CHECK
  CREDIT_CARD
  ON_ACCOUNT
}

enum PaymentTerm {
  COD
  NET_15_DAYS
  NET_30_DAYS
  NET_60_DAYS
  NONE
}

type Permission {
  createdAt: DateTime!
  id: String!
  name: String!
  type: ResourceType!
  updatedAt: DateTime!
}

type PermissionDeleteResult {
  result: Boolean!
}

input PermissionInput {
  name: String!
  type: ResourceType!
}

input PermissionsFilterInput {
  type: ResourceType!
}

input PermissionsSortInput {
  field: String!
  order: String!
}

input PermissionUpdateInput {
  id: String!
  name: String!
  type: ResourceType!
}

type Phone {
  extension: String!
  number: String!
  textOnly: Boolean!
  type: PhoneType!
}

input PhoneInput {
  extension: String = ""
  number: String = ""
  textOnly: Boolean = false
  type: PhoneType!
}

enum PhoneType {
  CELL
  FAX
  HOME
  MAIN
  OTHER
  PAGER
  PHONE
  WORK
}

"""GeoJSON Point as a Scalar"""
scalar Point

enum PolicyEffect {
  ALLOW @deprecated(reason: "Please use new Policy API")
  DENY @deprecated(reason: "Please use new Policy API")
}

type PolicyEntry {
  level: AccessLevel!
  overridden: Boolean
  subject: String!
}

input PolicyEntryInput {
  level: AccessLevel!
  overridden: Boolean = false
  subject: String!
}

input PolicyInput {
  entries: [PolicyEntryInput!]!
  resource: String!
}

input PolicyStatementInput {
  actions: [String!]!
  effect: String!
  resource: String!
}

input PolicyStatementTemplateInput {
  actions: [String!]!
  resourceType: ResourceType!
}

input PolicyTemplateInput {
  entries: [PolicyEntryInput!]!
  resourceType: ResourceType!
}

input PopulateEntityEvent {
  """force reindex without checking if mapping has changed"""
  forceReindex: Boolean!

  """name of the entity to populate into ElasticSearch"""
  name: String!

  """
  Recycling Facility SRN, example: "srn:acme:recycling:1"
  """
  resource: String!
}

input ProjectInput {
  customerJobSiteId: Int!
  description: String!
  endDate: String
  purchaseOrder: Boolean!
  startDate: String
}

type Query {
  activeOriginDistricts: [HaulingOriginDistrict!]!
  aggregatedOrderHistory(orderId: Int!): HaulingOrderHistory!
  availableResourceLogins: [ResourceLogin!]!
  company: Company!
  creditCard(id: ID!): CreditCard
  creditCards(filter: CreditCardFilter = {activeOnly: true, customerId: null, jobSiteId: null, relevantOnly: true}): [CreditCard!]
  customerTruck(filter: CustomerTruckFilter = {active: null, customerId: null, description: null, search: null}, id: Int!): CustomerTruck!
  customerTruckIndexed(id: Int!): CustomerTruckIndexed!
  customerTrucks(filter: CustomerTruckFilter = {active: null, customerId: null, description: null, search: null}, pagination: PaginationInput = {page: 1, perPage: 10}, sort: [SortInput!] = null): CustomerTrucksResponse!
  customerTrucksByIds(filter: CustomerTruckFilter = {active: null, customerId: null, description: null, search: null}, ids: [Int!]!): [CustomerTruck!]!
  customerTrucksIndexed(filter: CustomerTruckIndexedFilter = {}, pagination: PaginationInput = {page: 1, perPage: 10}, sort: [SortInput!] = null): CustomerTrucksListIndexed!

  """Get CustomerTruck count by filters"""
  customerTrucksIndexedCount(search: SearchBodyInput!): Int!
  destination(id: Int!): HaulingDestination!
  destinations(filter: DestinationFilter = {activeOnly: true}, pagination: PaginationInput = {page: 1, perPage: 25}, sort: [SortInput!] = null): DestinationsResponse!
  equipment(id: Int!): Equipment!
  equipments(filter: EquipmentFilterInput = {}, pagination: PaginationInput = {page: 1, perPage: 25}, sort: [SortInput!] = null): EquipmentsResponse!
  getHaulingBillableItems(search: HaulingBillableItemFilterInput!): [HaulingBillableItem!]!

  """get sales representives by business unit"""
  getSalesRepresentativesByBU(businessUnitId: Int!): [User!]!
  getWalkUpCustomer: HaulingCustomer
  haulingCompanyGeneralSettings: HaulingCompanyGeneralSettings
  haulingCustomer(id: Int!): HaulingCustomer!
  haulingCustomerGroups(filter: HaulingCustomerGroupFilter): [HaulingCustomerGroup!]!
  haulingCustomerJobSite(filter: HaulingCustomerJobSitePairByIdFilterInput!): HaulingCustomerJobSite!
  haulingCustomerJobSitePair(filter: HaulingCustomerJobSitePairFilterInput!): HaulingCustomerJobSite!
  haulingCustomerJobSites(filter: HaulingCustomerJobSiteFilterInput!): [HaulingCustomerJobSite!]!
  haulingCustomerJobSitesAll(filter: HaulingCustomerJobSiteFilterInput!): [HaulingCustomerJobSite!]!
  haulingCustomers(filter: CustomerFilter = {}, pagination: PaginationInput = {page: 1, perPage: 25}, sort: [SortInput!] = null): HaulingCustomersResponse!
  haulingJobSite(id: Int!): HaulingJobSite!
  haulingJobSites(filter: JobSiteFilter = {active: null}, pagination: PaginationInput = {page: 1, perPage: 25}, sort: [SortInput!] = null): haulingJobSitesResponse!
  haulingMaterial(id: Int!): HaulingMaterial!
  haulingMaterials(filter: HaulingMaterialFilterInput, pagination: PaginationInput = {page: 1, perPage: 25}, sort: [SortInput!] = null): HaulingMaterialsResponse!
  haulingPriceGroups(filter: HaulingPriceGroupFilterInput!): HaulingPriceGroupsResult!
  haulingProjects(filter: HaulingProjectFilter!): [HaulingProject!]!
  indexedOrdersGroupByStatusTotal(filter: OrdersIndexedFilter = {}): OrderTotalByStatus!
  lastUsedCreditCard(customerId: Int!, jobSiteId: Int): String
  listRoles(filter: RolesFilter = {boundToTenant: true}, limit: Int = 25, offset: Int = 0): ListRolesResult!

  """get users"""
  listUsers(filter: UsersFilter = {boundToTenant: true, email: null}, limit: Int = 25, offset: Int = 0, query: String): ListUsersResult!
  me: Me!
  minimalWeight(materialId: Int!, priceGroupId: Int!, type: OrderType!): Float
  onTheWayWONumbers(customerId: Int, onlyAllowSelfService: Boolean): [OnTheWayNumber!]!
  order(filter: OrderFilterInput = {customerId: null, customerJobSiteId: null, customerTruckId: null, jobSiteId: null, projectIds: [], status: null, WONumber: null}, id: Int!): Order!
  orderIndexed(id: Int!): OrderIndexed!
  orders(filter: OrderFilterInput = {customerId: null, customerJobSiteId: null, customerTruckId: null, jobSiteId: null, projectIds: [], status: null, WONumber: null}, pagination: PaginationInput = {page: 1, perPage: 10}, sort: [SortInput!] = null): OrdersResponse!
  ordersByHaulingId(ids: [Int!]!): [Order!]!
  ordersByIds(filter: OrderFilterInput = {customerId: null, customerJobSiteId: null, customerTruckId: null, jobSiteId: null, projectIds: [], status: null, WONumber: null}, ids: [Int!]!): [Order!]!
  ordersByWONumberAndCustomer(customerId: Int, onlyAllowSelfService: Boolean, WONumber: String!): [OrderIndexed!]!
  ordersGrid(filter: OrdersIndexedFilter = {}, pagination: PaginationInput = {page: 1, perPage: 10}, sort: [SortInput!] = null): OrdersIndexedList!
  ordersIndexed(search: SearchBodyInput!): OrdersIndexedResponse!

  """Get Order count by filters"""
  ordersIndexedCount(search: SearchBodyInput!): Int!
  origin(id: Int!): HaulingOrigin!
  origins(filter: OriginFilter = {activeOnly: true}, pagination: PaginationInput = {page: 1, perPage: 25}, sort: [SortInput!] = null): OriginsResponse!
  permissions(filter: PermissionsFilterInput, limit: Int = 25, offset: Int = 0, sort: [PermissionsSortInput!] = null): ListPermissionsResult!
  resource(srn: String!): Resource

  """Get User Resources"""
  resourceLogins: [AvailableResourceLogin!]!
  resources(filter: ResourcesFilterInput = {}, limit: Int = 25, offset: Int = 0, sort: [ResourcesSortInput!] = null): ListResourcesResult!
  role(id: String!): Role
  roles: [Role!]!
  salesRepresentatives: [User!]!
  scale(filter: ScaleFilterInput = {connectionStatus: null}, id: Int!): Scale!
  scales(filter: ScaleFilterInput = {connectionStatus: null}, pagination: PaginationInput = {page: 1, perPage: 10}, sort: [SortInput!] = null): ScalesResponse!
  scalesByIds(filter: ScaleFilterInput = {connectionStatus: null}, ids: [Int!]!): [Scale!]!
  serviceDaysAndHour(id: Int!): HaulingServiceDaysAndHours!
  serviceDaysAndHours(filter: HaulingServiceDaysAndHoursFilter = {}, pagination: PaginationInput = {page: 1, perPage: 25}, sort: [SortInput!] = null): ServiceDaysAndHoursResponse!
  taxDistricts: [HaulingTaxDistrict!]!
  taxDistrictsForOrder(filter: TaxDistrictFilter!): [HaulingTaxDistrict!]!
  trucksForOrderCreate(customerId: Int!, filter: TrucksForOrderCreateFilterInput = {}): [CustomerTruckForOrderCreate!]!
  user(filter: UsersFilter = {boundToTenant: true, email: null}, id: String = null): User
  userDriver: HaulingDriver

  """get users by ids"""
  users(ids: [String!]!, raw: Boolean = false): [User]!
  yardOperationConsoleActivity(input: YardConsoleActivityInput!): YardConsoleActivityTotal!
}

input RangeFilter {
  from: DateTime!
  to: DateTime!
}

type Resource {
  createdAt: DateTime!
  id: String
  image: String
  label: String
  loginUrl: String
  srn: String!
  subLabel: String
  type: ResourceType!
  updatedAt: DateTime!
}

type ResourceDeleteResult {
  result: Boolean!
}

input ResourceInput {
  id: String = null
  image: String = null
  label: String = null
  loginUrl: String = null
  srn: String!
  subLabel: String = null
  type: ResourceType!
}

"""Login to a resource, used in lobby for list of login targets"""
type ResourceLogin {
  graderHasBUAccess: Boolean
  hasGradingAccess: Boolean
  hasRecyclingAccess: Boolean
  id: String

  """Optional image of a resource"""
  image: String
  label: String
  loginUrl: String
  resourceType: String!
  subLabel: String
  tenantName: String!
  updatedAt: String!
}

input ResourcesFilterInput {
  configurableOnly: Boolean
  type: ResourceType
}

input ResourcesSortInput {
  field: String!
  order: String!
}

enum ResourceType {
  CUSTOMER_PORTAL
  GLOBAL
  HAULING
  RECYCLING
}

input ResourceUpdateInput {
  id: String = null
  image: String = null
  label: String = null
  loginUrl: String = null
  srn: String!
  subLabel: String = null
  type: ResourceType!
}

type Role {
  createdAt: DateTime!
  description: String!
  id: ID!
  policies: [RolePolicy!]!
  policyStatements: [RolePolicyStatement!]!
  policyTemplates: [RolePolicyTemplate!]!
  status: RoleStatus!
  tenantId: String
  updatedAt: DateTime!
  users: [User!]!
  usersCount: Int!
}

input RoleInput {
  description: String!
  policies: [PolicyInput!]
  policyStatements: [PolicyStatementInput!]
  policyStatementTemplates: [PolicyStatementTemplateInput!]
  policyTemplates: [PolicyTemplateInput!]
  status: RoleStatus!
}

type RolePolicy {
  createdAt: DateTime!
  entries: [PolicyEntry!]!
  id: String!
  resource: String!
  role: Role!
  updatedAt: DateTime!
}

type RolePolicyStatement {
  actions: [String!]!
  effect: PolicyEffect!
  name: String!
  resource: String!
  role: Role!
  tenantId: String!
}

type RolePolicyTemplate {
  createdAt: DateTime!
  entries: [PolicyEntry!]!
  id: String!
  resourceType: ResourceType!
  role: Role!
  updatedAt: DateTime!
}

input RolesFilter {
  boundToTenant: Boolean = true
}

enum RoleStatus {
  ACTIVE
  DISABLED
}

type SalesRepresentative {
  businessUnitId: Float!
  commissionAmount: Float!
}

input SalesRepresentativeInput {
  businessUnitId: Float!
  commissionAmount: Float!
}

type Scale {
  computerId: Float
  connectionStatus: ScaleConnectionStatus!
  createdAt: DateTime!
  deviceName: String
  deviceNumber: Float
  id: Float!
  name: String!
  updatedAt: DateTime!
}

enum ScaleConnectionStatus {
  CONNECTED
  FAILURE
  PENDING_CONNECTION
}

type ScaleDeleteResult {
  result: Boolean!
}

input ScaleFilterInput {
  connectionStatus: ScaleConnectionStatus = null
}

input ScaleInput {
  computerId: Int
  connectionStatus: ScaleConnectionStatus!
  deviceName: String
  deviceNumber: Int
  name: String!
}

type ScalesResponse {
  data: [Scale!]!
  total: Float!
}

input ScaleUpdateInput {
  computerId: Int
  connectionStatus: ScaleConnectionStatus!
  deviceName: String
  deviceNumber: Int
  id: Float!
  name: String!
}

input SearchBodyInput {
  aggs: ObjectLiteralScalar
  from: Float
  highlight: ObjectLiteralScalar
  query: ObjectLiteralScalar
  size: Float
  sort: [ObjectLiteralScalar!]
}

type ServiceDaysAndHoursResponse {
  data: [HaulingServiceDaysAndHours!]!
}

input SortInput {
  field: String!
  order: String!
}

type Tax {
  application: TaxApplication
  calculation: TaxCalculation!
  exclusions: [Float!]
  group: Boolean!
  nonGroup: [NonGroupTaxValue!]
  value: String
}

enum TaxApplication {
  Each
  Order
  Quantity
  Subscription
  Ton
}

type TaxBusinessConfiguration {
  businessLineId: Float!
  commercialLineItems: LineItemTax!
  commercialMaterials: Tax!
  commercialRecurringLineItems: Tax!
  commercialRecurringServices: Tax!
  commercialServices: Tax!
  id: Float!
  nonCommercialLineItems: LineItemTax!
  nonCommercialMaterials: Tax!
  nonCommercialRecurringLineItems: Tax!
  nonCommercialRecurringServices: Tax!
  nonCommercialServices: Tax!
}

enum TaxCalculation {
  Flat
  Percentage
}

input TaxDistrictFilter {
  customerId: Float!
  jobSiteId: Int = null
  originDistrictId: Int = null
}

enum TaxDistrictType {
  Country
  Municipal
  Primary
  Secondary
}

input TrucksForOrderCreateFilterInput {
  isDefinedEmptyWeight: Boolean
}

"""a Scalar that represents file upload"""
scalar Upload

type UploadFileResponse {
  encoding: String!
  filename: String!
  mimetype: String!
  url: String!
}

type User {
  address: Address
  allPermissions: [AllPermissions!]
  availableActions(resource: String!): [String!]!
  createdAt: DateTime!
  email: String!
  firstName: String
  hasPersonalPermissions: Boolean!
  id: String!
  lastName: String
  name: String!
  permissions(resource: String!): [PolicyEntry!]!
  phones: [Phone!]!
  policies: [UserPolicy!]!
  policyStatements: [UserPolicyStatement!]!
  roleIds: [Float!]!
  roles: [Role!]!
  salesRepresentatives: [SalesRepresentative!]
  status: UserStatus!
  tenantId: String
  tenantName: String
  title: String
  updatedAt: DateTime!
}

input UserCreateInput {
  address: AddressInput
  email: String!
  firstName: String!
  lastName: String!
  phones: [PhoneInput!]
  policies: [PolicyInput!]
  policyStatements: [PolicyStatementInput!]
  roleIds: [ID!]!
  salesRepresentatives: [SalesRepresentativeInput!]
  status: UserStatus!
  title: String!
}

type UserPolicy {
  createdAt: DateTime!
  entries: [PolicyEntry!]!
  id: String!
  resource: String!
  updatedAt: DateTime!
  user: User!
}

type UserPolicyStatement {
  actions: [String!]!
  effect: PolicyEffect!
  name: String!
  resource: String!
  tenantId: String!
  user: User!
}

input UsersFilter {
  boundToTenant: Boolean = true
  email: String = null
}

enum UserStatus {
  ACTIVE
  DISABLED
}

input UserUpdateInput {
  address: AddressInput
  firstName: String!
  lastName: String!
  phones: [PhoneInput!]
  policies: [PolicyInput!]
  policyStatements: [PolicyStatementInput!]
  roleIds: [String!]!
  salesRepresentatives: [SalesRepresentativeInput!]
  status: UserStatus!
  title: String!
}

input YardConsoleActivityInput {
  activeTab: String!
  query: ObjectLiteralScalar
  time: DateTime!
}

type YardConsoleActivityTotal {
  inYard: Int
  onTheWay: Int
  selfService: Int
  today: Int
}
