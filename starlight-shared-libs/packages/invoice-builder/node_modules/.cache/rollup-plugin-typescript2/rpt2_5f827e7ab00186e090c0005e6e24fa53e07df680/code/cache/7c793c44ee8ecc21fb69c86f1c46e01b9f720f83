{"code":"import React from 'react';\r\nimport { format } from 'date-fns';\r\nimport { addressExists, formatAddress, formatMoney, getCreditCardBrand } from '../../../helpers';\r\nimport styles from '../styles.scss';\r\nimport receiptStyles from './styles.scss';\r\nconst dateFormat = 'dd MMM, yyyy';\r\nconst ReceiptBuilder = ({ logoUrl, physicalAddress, customer, order, payment, preview = false, }) => {\r\n    const previewClassName = `${preview ? styles.preview : ''}`;\r\n    let paymentIdentifier;\r\n    if (payment.paymentMethod === 'creditCard') {\r\n        paymentIdentifier = `${getCreditCardBrand(payment.cardType)}•••• ${payment.paymentIdentifier.slice(payment.paymentIdentifier.length - 4)}`;\r\n    }\r\n    else if (payment.paymentMethod === 'check') {\r\n        paymentIdentifier = `Check# ${payment.paymentIdentifier}`;\r\n    }\r\n    else {\r\n        paymentIdentifier = 'Cash';\r\n    }\r\n    return (React.createElement(\"div\", { className: `${styles.wrapper} ${previewClassName}` },\r\n        React.createElement(\"div\", { className: styles.header },\r\n            logoUrl ? (React.createElement(\"img\", { src: logoUrl, alt: \"logo\", className: `${styles.logo} ${previewClassName}` })) : null,\r\n            physicalAddress && addressExists(physicalAddress) ? formatAddress(physicalAddress) : null),\r\n        React.createElement(\"div\", { className: styles.generalInformation },\r\n            React.createElement(\"div\", null,\r\n                React.createElement(\"div\", { className: styles.heading }, \"Receipt For\"),\r\n                customer.name),\r\n            customer.invoiceConstruction !== 'byCustomer' && order ? (React.createElement(\"div\", null,\r\n                React.createElement(\"div\", { className: styles.heading }, \"Job Site\"),\r\n                formatAddress(order.jobSite))) : null),\r\n        React.createElement(\"div\", { className: receiptStyles.tableHeader }, \"Order Information\"),\r\n        React.createElement(\"table\", { className: styles.table },\r\n            React.createElement(\"thead\", null,\r\n                React.createElement(\"tr\", null,\r\n                    React.createElement(\"th\", null, \"Order#\"),\r\n                    React.createElement(\"th\", null, \"Date\"),\r\n                    React.createElement(\"th\", null, \"Service\"),\r\n                    React.createElement(\"th\", null, \"Rate\"),\r\n                    React.createElement(\"th\", null, \"Qty\"),\r\n                    React.createElement(\"th\", null, \"Amount\"),\r\n                    React.createElement(\"th\", { className: styles.textRight }, \"Total\"))),\r\n            React.createElement(\"tbody\", null,\r\n                order.services.map((service, index) => index === 0 ? (React.createElement(\"tr\", { key: index },\r\n                    React.createElement(\"td\", null, order.id),\r\n                    React.createElement(\"td\", null, format(order.serviceDate, dateFormat)),\r\n                    React.createElement(\"td\", null, service.description),\r\n                    React.createElement(\"td\", null, service.price.toFixed(2)),\r\n                    React.createElement(\"td\", null, service.quantity),\r\n                    React.createElement(\"td\", null, (service.price * service.quantity).toFixed(2)),\r\n                    React.createElement(\"td\", { className: styles.textRight }, order.beforeTaxesTotal.toFixed(2)))) : (React.createElement(\"tr\", { key: index },\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null, service.description),\r\n                    React.createElement(\"td\", null, service.price.toFixed(2)),\r\n                    React.createElement(\"td\", null, service.quantity),\r\n                    React.createElement(\"td\", null, (service.price * service.quantity).toFixed(2)),\r\n                    React.createElement(\"td\", null)))),\r\n                order.surchargesTotal != null && order.surchargesTotal !== 0 ? (React.createElement(\"tr\", null,\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null, \"Surcharges\"),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null, order.surchargesTotal.toFixed(2)),\r\n                    React.createElement(\"td\", null))) : null,\r\n                order.grandTotal !== order.beforeTaxesTotal ? (React.createElement(\"tr\", null,\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null, \"Taxes\"),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null, (order.grandTotal -\r\n                        order.beforeTaxesTotal -\r\n                        (Number(order.surchargesTotal) || 0)).toFixed(2)),\r\n                    React.createElement(\"td\", null))) : null)),\r\n        React.createElement(\"div\", { className: receiptStyles.tableDivider }),\r\n        React.createElement(\"div\", { className: receiptStyles.total }, order.grandTotal),\r\n        React.createElement(\"div\", { className: receiptStyles.tableHeader }, \"Order Payment\"),\r\n        React.createElement(\"table\", { className: styles.table },\r\n            React.createElement(\"thead\", null,\r\n                React.createElement(\"tr\", null,\r\n                    React.createElement(\"th\", null, \"Payment\"),\r\n                    React.createElement(\"th\", null, \"Date\"),\r\n                    React.createElement(\"th\", null, \"Transaction #\"),\r\n                    React.createElement(\"th\", { className: styles.textRight }, \"Paid Amount,$\"))),\r\n            React.createElement(\"tbody\", null,\r\n                React.createElement(\"tr\", null,\r\n                    React.createElement(\"td\", null, paymentIdentifier),\r\n                    React.createElement(\"td\", null, format(payment.date, dateFormat)),\r\n                    React.createElement(\"td\", null, payment.paymentMethod === 'creditCard' ? payment.paymentRetRef : null),\r\n                    React.createElement(\"td\", { className: styles.textRight }, formatMoney(payment.amount, 2))))),\r\n        React.createElement(\"div\", { className: receiptStyles.tableDivider }),\r\n        React.createElement(\"div\", { className: receiptStyles.total }, formatMoney(payment.amount, 2))));\r\n};\r\nexport default ReceiptBuilder;\r\n","references":["/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/node_modules/@types/react/index.d.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/node_modules/date-fns/typings.d.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/src/helpers/index.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/src/components/builders/ReceiptBuilder/types.ts"],"dts":{"name":"/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/build/components/builders/ReceiptBuilder/ReceiptBuilder.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nimport type { IReceiptBuilder } from './types';\r\ndeclare const ReceiptBuilder: React.FC<IReceiptBuilder>;\r\nexport default ReceiptBuilder;\r\n"}}
