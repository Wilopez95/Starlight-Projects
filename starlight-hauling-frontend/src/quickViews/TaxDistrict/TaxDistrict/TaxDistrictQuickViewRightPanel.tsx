import React, { useCallback, useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import {
  Autocomplete,
  Checkbox,
  IAutocompleteConfig,
  Layouts,
  Select,
  TextInputElement,
} from '@starlightpro/shared-components';
import bbox from '@turf/bbox';
import { useFormikContext } from 'formik';
import { FeatureCollection, MultiPolygon, Polygon } from 'geojson';
import { observer } from 'mobx-react-lite';

import { TaxDistrictService } from '@root/api';
import {
  AutocompleteTemplates,
  Boundaries,
  DescriptiveTooltip,
  FormInput,
  InteractiveMap,
  Typography,
} from '@root/common';
import { Divider } from '@root/common/TableTools';
import { taxDistrictTypes } from '@root/consts';
import { generateTaxDistrictDescription, normalizeOptions } from '@root/helpers';
import { useStores } from '@root/hooks';
import { Regions } from '@root/i18n/config/region';
import { buildI18Path } from '@root/i18n/helpers';
import { useIntl } from '@root/i18n/useIntl';
import { ITaxDistrict, TaxDistrictType } from '@root/types';
import { IAdministrativeSearchResponse } from '@root/types/responseEntities';

import { TaxDistrictForm } from './formikData';

const I18N_PATH = buildI18Path(
  'pages.SystemConfiguration.tables.TaxDistricts.QuickView.TaxDistrict.',
);
const DISTRICT_TYPES_PATH =
  'pages.SystemConfiguration.tables.TaxDistricts.Text.LocalDistrictTypes.';

const canChangeMapCode = (taxDistrict: ITaxDistrict | null | undefined) =>
  !taxDistrict ||
  (!taxDistrict.districtCode && taxDistrict.districtType !== TaxDistrictType.Country);

const TaxDistrictQuickViewRightPanel: React.FC = () => {
  const { values, errors, handleChange, setFieldValue, setValues, setFieldError } =
    useFormikContext<TaxDistrictForm>();
  const { t } = useTranslation();

  const { taxDistrictStore, systemConfigurationStore, i18nStore, businessLineStore } = useStores();
  const intlConfig = useIntl();

  const selectedTaxDistrict = taxDistrictStore.selectedEntity;
  const isCreating = systemConfigurationStore.isCreating;
  const isNew = isCreating || !selectedTaxDistrict;

  const handleAutocompleteSelect = useCallback(
    (administrativeDistrict: IAdministrativeSearchResponse) => {
      setValues({
        ...values,
        districtCode: administrativeDistrict.id,
        districtName: administrativeDistrict.name,
        bbox: administrativeDistrict?.bbox,
      });
    },
    [setValues, values],
  );

  const handleZoneClick = useCallback(
    (
      featureCollection: FeatureCollection<Polygon | MultiPolygon, IAdministrativeSearchResponse>,
    ) => {
      if (!canChangeMapCode(selectedTaxDistrict)) {
        return;
      }

      const { id, properties } = featureCollection.features[0];

      const stateLabel = properties.primaryUnit ? `, ${properties.primaryUnit}` : '';

      setValues({
        ...values,
        districtCode: id?.toString(),
        districtName: `${properties.name}${stateLabel}`,
        bbox: bbox(featureCollection),
      });
    },
    [setValues, values, selectedTaxDistrict],
  );

  const districtTypes = useMemo(
    () =>
      selectedTaxDistrict?.districtType === TaxDistrictType.Country
        ? [
            {
              value: TaxDistrictType.Country,
              label: t(`${DISTRICT_TYPES_PATH}${i18nStore.region}.${TaxDistrictType.Country}`),
            },
          ]
        : taxDistrictTypes
            .filter(type => type !== TaxDistrictType.Country)
            .map(type => ({
              value: type,
              label: t(`${DISTRICT_TYPES_PATH}${i18nStore.region}.${type}`),
            })),
    [selectedTaxDistrict?.districtType, t, i18nStore.region],
  );

  const handleAdministrativeUnitsRequest = useCallback(
    (query: string) => {
      return TaxDistrictService.searchAdministrativeUnits(
        query,
        values.districtType,
        i18nStore.region,
      );
    },
    [i18nStore.region, values.districtType],
  );

  const handleChangeAutocomplete = useCallback(
    (_: string, search: string) => {
      if (!canChangeMapCode(selectedTaxDistrict)) {
        return;
      }

      setValues({
        ...values,
        districtName: search,
        districtCode: undefined,
      });
      setFieldError('districtCode', undefined);
    },
    [selectedTaxDistrict, setValues, values, setFieldError],
  );

  const handleUseAutogeneratedClick = useCallback(() => {
    setValues({
      ...values,
      useGeneratedDescription: true,
      taxDescription: generateTaxDistrictDescription(
        selectedTaxDistrict,
        businessLineStore.values,
        intlConfig,
      ),
    });
  }, [businessLineStore.values, intlConfig, selectedTaxDistrict, setValues, values]);

  const handleTaxDescriptionChange = useCallback(
    (e: React.ChangeEvent<TextInputElement>) => {
      const value = e.target.value;

      if (values.useGeneratedDescription) {
        setFieldValue('useGeneratedDescription', false);
      }
      setFieldValue('taxDescription', value);
    },
    [values, setFieldValue],
  );

  const administrativeUnitsAutocompleteConfigs: IAutocompleteConfig[] = useMemo(() => {
    return [
      {
        name: 'administrativeUnits',
        onSelect: handleAutocompleteSelect,
        template: <AutocompleteTemplates.Administrative />,
      },
    ];
  }, [handleAutocompleteSelect]);

  const title =
    isNew || !values.description ? t(`${I18N_PATH.Text}CreateNewTaxDistrict`) : values.description;
  const subTitle = t(`${DISTRICT_TYPES_PATH}${i18nStore.region}.${values.districtType}`);

  return (
    <Layouts.Scroll>
      <Layouts.Padding padding="3">
        <Typography variant="headerThree">{title}</Typography>

        <Typography variant="caption" textTransform="uppercase">
          {subTitle}
        </Typography>
        <Divider both />
        <Layouts.Flex>
          <Layouts.Column>
            <Layouts.Margin bottom="3">
              <Layouts.Flex justifyContent="space-between">
                <Typography color="secondary">{t('Text.Status')}</Typography>
                <Checkbox
                  id="activeCheckbox"
                  name="active"
                  value={values.active}
                  onChange={handleChange}
                >
                  {t('Text.Active')}
                </Checkbox>
              </Layouts.Flex>
            </Layouts.Margin>
            <FormInput
              label={`${t('Text.Description')}*`}
              name="description"
              onChange={handleChange}
              value={values.description}
              error={errors.description}
            />

            <Select
              label={`${t(`${I18N_PATH.Form}DistrictType`)}*`}
              name="districtType"
              options={normalizeOptions(districtTypes)}
              value={values.districtType}
              onSelectChange={setFieldValue}
              disabled={!canChangeMapCode(selectedTaxDistrict)}
              nonClearable
              error={errors.districtType}
            />

            {values.districtType !== TaxDistrictType.Country ? (
              <Autocomplete
                label={
                  <>
                    {t(`${I18N_PATH.Form}MapCode`)}
                    <Layouts.Margin left="1" as="span">
                      <DescriptiveTooltip
                        position="top"
                        text={t(`${I18N_PATH.Form}MapCodeTooltip`)}
                      />
                    </Layouts.Margin>
                  </>
                }
                name="districtName"
                placeholder={t(`${I18N_PATH.Form}SearchAdministrativeUnits`)}
                search={values.districtName ?? ''}
                disabled={!canChangeMapCode(selectedTaxDistrict)}
                onRequest={handleAdministrativeUnitsRequest}
                onSearchChange={handleChangeAutocomplete}
                configs={administrativeUnitsAutocompleteConfigs}
                error={errors.districtCode}
              />
            ) : null}
            <Checkbox
              id="taxesPerCustomerType"
              name="taxesPerCustomerType"
              value={values.taxesPerCustomerType}
              onChange={handleChange}
            >
              {t(`${I18N_PATH.Form}TaxesPerCustomerType`)}
            </Checkbox>

            {values.districtType === TaxDistrictType.Primary && i18nStore.region === Regions.CA ? (
              <Checkbox
                id="includeNationalInTaxableAmountCheckbox"
                name="includeNationalInTaxableAmount"
                value={values.includeNationalInTaxableAmount}
                onChange={handleChange}
              >
                {t(`${I18N_PATH.Form}IncludeNationalInTaxableAmount`)}
              </Checkbox>
            ) : null}

            <Divider both />

            <FormInput
              area
              fixedLength={180}
              label={t(`${I18N_PATH.Form}TaxesDescription`)}
              name="taxDescription"
              value={values.taxDescription ?? ''}
              onChange={handleTaxDescriptionChange}
            />

            <Typography color="information" onClick={handleUseAutogeneratedClick}>
              {t(`${I18N_PATH.Text}UseAutogeneratedTaxes`)}
            </Typography>
          </Layouts.Column>

          <Layouts.Column>
            <InteractiveMap initialFit={values.bbox} position="relative" height="100%">
              {values.districtType !== TaxDistrictType.Country ? (
                <Boundaries
                  type={values.districtType}
                  country={i18nStore.region}
                  selectedZone={values.districtCode}
                  onZoneClick={handleZoneClick}
                />
              ) : null}
            </InteractiveMap>
          </Layouts.Column>
        </Layouts.Flex>
      </Layouts.Padding>
    </Layouts.Scroll>
  );
};

export default observer(TaxDistrictQuickViewRightPanel);
