{"code":"import React, { useEffect, useState } from 'react';\r\nimport { format } from 'date-fns';\r\nimport { addressExists, formatAddress, formatMoney } from '../../../helpers';\r\nimport { calculateDueDate, getPaymentTermsDisplayString } from './helpers';\r\nimport styles from '../styles.scss';\r\nimport localStyles from './styles.scss';\r\nconst dateFormat = 'dd MMM, yyyy';\r\nconst SubscriptionInvoiceBuilder = ({ payments, logoUrl, physicalAddress, customer, subscriptions, preview = false, }) => {\r\n    const [totalAmount, setTotalAmount] = useState(0);\r\n    const [totalInvoice, setTotalInvoice] = useState(0);\r\n    const [totalTaxes] = useState(0);\r\n    const [totalSurcharges] = useState(0);\r\n    useEffect(() => {\r\n        if (subscriptions === null || subscriptions === void 0 ? void 0 : subscriptions.length) {\r\n            const total = subscriptions\r\n                .map((obj) => obj.totalPriceForSubscription)\r\n                .reduce((acc, curr) => acc + curr);\r\n            setTotalInvoice(total);\r\n        }\r\n    }, [subscriptions]);\r\n    useEffect(() => {\r\n        setTotalAmount(totalInvoice + totalTaxes + totalSurcharges);\r\n    }, [totalInvoice, totalTaxes, totalSurcharges]);\r\n    const previewClassName = `${preview ? styles.preview : ''}`;\r\n    return (React.createElement(\"div\", { className: `${styles.wrapper} ${previewClassName}` },\r\n        React.createElement(\"div\", { className: styles.header },\r\n            logoUrl && (React.createElement(\"img\", { src: logoUrl, alt: 'logo', className: `${styles.logo} ${previewClassName}` })),\r\n            physicalAddress && addressExists(physicalAddress) && formatAddress(physicalAddress)),\r\n        React.createElement(\"div\", { className: styles.generalInformation },\r\n            React.createElement(\"div\", null,\r\n                React.createElement(\"div\", { className: styles.heading }, \"Bill to\"),\r\n                formatAddress(customer.billingAddress)),\r\n            customer.invoiceConstruction !== 'byCustomer' && (React.createElement(\"div\", null,\r\n                React.createElement(\"div\", { className: styles.heading }, \"Job Site\"),\r\n                physicalAddress && addressExists(physicalAddress) && formatAddress(physicalAddress))),\r\n            React.createElement(\"div\", { className: localStyles.invoiceInformation },\r\n                React.createElement(\"div\", { className: localStyles.label }, \"Invoice Date\"),\r\n                React.createElement(\"div\", null, format(new Date(), dateFormat)),\r\n                React.createElement(\"div\", { className: localStyles.label }, \"Due Date\"),\r\n                React.createElement(\"div\", null, format(customer.paymentTerms ? calculateDueDate(customer.paymentTerms) : new Date(), dateFormat)),\r\n                customer.paymentTerms && (React.createElement(React.Fragment, null,\r\n                    React.createElement(\"div\", { className: localStyles.label }, \"Payment Terms\"),\r\n                    React.createElement(\"div\", null, getPaymentTermsDisplayString(customer.paymentTerms)))))),\r\n        React.createElement(\"table\", { className: styles.table },\r\n            React.createElement(\"thead\", null,\r\n                React.createElement(\"tr\", null,\r\n                    React.createElement(\"th\", { className: localStyles.subsField }, \"Subscription#\"),\r\n                    React.createElement(\"th\", { className: localStyles.dateField }, \"Date / Billing Period\"),\r\n                    React.createElement(\"th\", null, \"Billable Item\"),\r\n                    React.createElement(\"th\", null, \"Rate\"),\r\n                    React.createElement(\"th\", { className: localStyles.quantityField }, \"Qty\"),\r\n                    React.createElement(\"th\", { className: styles.textRight }, \"Amount\"))),\r\n            React.createElement(\"tbody\", null, subscriptions === null || subscriptions === void 0 ? void 0 : subscriptions.map((subscription, index) => (React.createElement(React.Fragment, { key: subscription.id },\r\n                React.createElement(\"tr\", { key: index },\r\n                    React.createElement(\"td\", { className: localStyles.title }, `Subscription #${subscription.id}`),\r\n                    React.createElement(\"td\", null, `${format(subscription === null || subscription === void 0 ? void 0 : subscription.nextBillingPeriodFrom, dateFormat)}-${format(subscription === null || subscription === void 0 ? void 0 : subscription.nextBillingPeriodTo, dateFormat)}`),\r\n                    React.createElement(\"td\", null, subscription.serviceItems[0].billableService.description),\r\n                    React.createElement(\"td\", null, formatMoney(subscription.serviceItems[0].price)),\r\n                    React.createElement(\"td\", { className: localStyles.quantityField }, subscription.serviceItems[0].quantity),\r\n                    React.createElement(\"td\", { className: styles.textRight }, formatMoney(subscription.totalPriceForSubscription))),\r\n                subscription.serviceItems[0].lineItems.length ? (React.createElement(React.Fragment, null,\r\n                    React.createElement(\"tr\", null,\r\n                        React.createElement(\"td\", { className: localStyles.subtitle }, \"Line Items\")),\r\n                    subscription.serviceItems[0].lineItems.map((lineItem, index2) => (React.createElement(\"tr\", { key: index2 },\r\n                        React.createElement(\"td\", null),\r\n                        React.createElement(\"td\", null, `${format(subscription.nextBillingPeriodFrom, dateFormat)}-${format(subscription.nextBillingPeriodTo, dateFormat)}`),\r\n                        React.createElement(\"td\", null),\r\n                        React.createElement(\"td\", null, formatMoney(lineItem.price)),\r\n                        React.createElement(\"td\", { className: localStyles.quantityField }, lineItem.quantity),\r\n                        React.createElement(\"td\", { className: styles.textRight }, formatMoney(lineItem.quantity * lineItem.price))))))) : null,\r\n                subscription.serviceItems[0].subscriptionOrders.length ? (React.createElement(React.Fragment, null,\r\n                    React.createElement(\"tr\", null,\r\n                        React.createElement(\"td\", { className: localStyles.subtitle }, \" Subscriptions Orders\")),\r\n                    subscription.serviceItems[0].subscriptionOrders.map((subsOrder, index3) => (React.createElement(\"tr\", { key: index3 },\r\n                        React.createElement(\"td\", { className: localStyles.subsField }, `Subscription Order #${subsOrder.sequenceId}`)))))) : null))))),\r\n        React.createElement(\"div\", { className: styles.summary },\r\n            React.createElement(\"div\", { className: styles.label }, \"Surcharges\"),\r\n            React.createElement(\"div\", null, formatMoney(totalSurcharges)),\r\n            React.createElement(\"div\", { className: styles.label }, \"Taxes\"),\r\n            React.createElement(\"div\", null, formatMoney(totalTaxes)),\r\n            React.createElement(\"div\", { className: styles.label }, \"Invoice Total\"),\r\n            React.createElement(\"div\", null, formatMoney(totalInvoice)),\r\n            React.createElement(\"div\", { className: styles.label }, \"Payments\"),\r\n            React.createElement(\"div\", null, formatMoney(payments)),\r\n            React.createElement(\"div\", { className: styles.divider }),\r\n            React.createElement(\"div\", { className: `${styles.label} ${styles.total} ${previewClassName}` }, \"Balance\"),\r\n            React.createElement(\"div\", { className: `${styles.total} ${previewClassName}` }, formatMoney(totalAmount)))));\r\n};\r\nexport default SubscriptionInvoiceBuilder;\r\n","references":["/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/node_modules/@types/react/index.d.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/node_modules/date-fns/typings.d.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/src/types.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/src/helpers/index.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/src/components/builders/SubscriptionInvoiceBuilder/helpers.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/src/components/builders/SubscriptionInvoiceBuilder/types.ts"],"dts":{"name":"/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/build/components/builders/SubscriptionInvoiceBuilder/SubscriptionInvoiceBuilder.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nimport type { IInvoiceBuilder } from './types';\r\ndeclare const SubscriptionInvoiceBuilder: React.FC<IInvoiceBuilder>;\r\nexport default SubscriptionInvoiceBuilder;\r\n"}}
