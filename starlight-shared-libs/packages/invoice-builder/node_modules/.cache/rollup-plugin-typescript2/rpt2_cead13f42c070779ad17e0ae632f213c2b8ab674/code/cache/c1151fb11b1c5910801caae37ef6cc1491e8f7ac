{"code":"import React from 'react';\r\nimport { format } from 'date-fns';\r\nimport { addressExists, formatAddress, formatMoney } from '../../../helpers';\r\nimport styles from '../styles.scss';\r\nimport { calculateDueDate, getPaymentTermsDisplayString } from './helpers';\r\nimport localStyles from './styles.scss';\r\nconst dateFormat = 'dd MMM, yyyy';\r\nconst InvoiceBuilder = ({ logoUrl, physicalAddress, customer, orders, invoiceNumber, payments, preview = false, }) => {\r\n    const taxesTotal = orders.reduce((acc, order) => acc + (order.grandTotal - order.beforeTaxesTotal - order.surchargesTotal), 0);\r\n    const surchargesTotal = orders.reduce((acc, order) => acc + order.surchargesTotal, 0);\r\n    const invoiceTotal = orders.reduce((acc, order) => acc + order.beforeTaxesTotal, 0);\r\n    const previewClassName = `${preview ? styles.preview : ''}`;\r\n    return (React.createElement(\"div\", { className: `${styles.wrapper} ${previewClassName}` },\r\n        React.createElement(\"div\", { className: styles.header },\r\n            logoUrl ? (React.createElement(\"img\", { src: logoUrl, alt: \"logo\", className: `${styles.logo} ${previewClassName}` })) : null,\r\n            physicalAddress && addressExists(physicalAddress) ? formatAddress(physicalAddress) : null),\r\n        React.createElement(\"div\", { className: styles.generalInformation },\r\n            React.createElement(\"div\", null,\r\n                React.createElement(\"div\", { className: styles.heading }, \"Bill to\"),\r\n                formatAddress(customer.billingAddress)),\r\n            customer.invoiceConstruction !== 'byCustomer' && orders[0] ? (React.createElement(\"div\", null,\r\n                React.createElement(\"div\", { className: styles.heading }, \"Job Site\"),\r\n                formatAddress(orders[0].jobSite))) : null,\r\n            React.createElement(\"div\", { className: localStyles.invoiceInformation },\r\n                invoiceNumber ? (React.createElement(React.Fragment, null,\r\n                    React.createElement(\"div\", { className: localStyles.label }, \"Invoice #\"),\r\n                    React.createElement(\"div\", null, invoiceNumber))) : null,\r\n                React.createElement(\"div\", { className: localStyles.label }, \"Invoice Date\"),\r\n                React.createElement(\"div\", null, format(new Date(), dateFormat)),\r\n                React.createElement(\"div\", { className: localStyles.label }, \"Due Date\"),\r\n                React.createElement(\"div\", null, format(customer.paymentTerms ? calculateDueDate(customer.paymentTerms) : new Date(), dateFormat)),\r\n                customer.paymentTerms ? (React.createElement(React.Fragment, null,\r\n                    React.createElement(\"div\", { className: localStyles.label }, \"Payment Terms\"),\r\n                    React.createElement(\"div\", null, getPaymentTermsDisplayString(customer.paymentTerms)))) : null)),\r\n        React.createElement(\"table\", { className: styles.table },\r\n            React.createElement(\"thead\", null,\r\n                React.createElement(\"tr\", null,\r\n                    React.createElement(\"th\", null, \"Order#\"),\r\n                    React.createElement(\"th\", null, \"PO#\"),\r\n                    React.createElement(\"th\", null, \"WO#\"),\r\n                    React.createElement(\"th\", null, \"Date#\"),\r\n                    React.createElement(\"th\", null, \"Service\"),\r\n                    React.createElement(\"th\", null, \"Ticket\"),\r\n                    React.createElement(\"th\", null, \"Rate\"),\r\n                    React.createElement(\"th\", null, \"Qty\"),\r\n                    React.createElement(\"th\", null, \"Amount\"),\r\n                    React.createElement(\"th\", { className: styles.textRight }, \"Total\"))),\r\n            React.createElement(\"tbody\", null, orders.map(order => (React.createElement(React.Fragment, { key: order.id },\r\n                order.services.map((service, index) => index === 0 ? (React.createElement(\"tr\", { key: index },\r\n                    React.createElement(\"td\", null, order.id),\r\n                    React.createElement(\"td\", null, order.poNumber),\r\n                    React.createElement(\"td\", null, order.woNumber),\r\n                    React.createElement(\"td\", null, format(order.serviceDate, dateFormat)),\r\n                    React.createElement(\"td\", null, service.description),\r\n                    React.createElement(\"td\", null, order.ticket),\r\n                    React.createElement(\"td\", null, service.price.toFixed(2)),\r\n                    React.createElement(\"td\", null, service.quantity),\r\n                    React.createElement(\"td\", null, (service.price * service.quantity).toFixed(2)),\r\n                    React.createElement(\"td\", { className: styles.textRight }, order.beforeTaxesTotal.toFixed(2)))) : (React.createElement(\"tr\", { key: index },\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null, service.description),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null, service.price.toFixed(2)),\r\n                    React.createElement(\"td\", null, service.quantity),\r\n                    React.createElement(\"td\", null, (service.price * service.quantity).toFixed(2)),\r\n                    React.createElement(\"td\", null)))),\r\n                order.surchargesTotal > 0 ? (React.createElement(\"tr\", { className: styles.divider },\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null, \"Surcharges\"),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null, order.surchargesTotal.toFixed(2)),\r\n                    React.createElement(\"td\", null))) : null,\r\n                order.grandTotal !== order.beforeTaxesTotal + order.surchargesTotal ? (React.createElement(\"tr\", { className: styles.divider },\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null, \"Taxes\"),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null),\r\n                    React.createElement(\"td\", null, (order.grandTotal - order.surchargesTotal - order.beforeTaxesTotal).toFixed(2)),\r\n                    React.createElement(\"td\", null))) : null))))),\r\n        React.createElement(\"div\", { className: styles.summary },\r\n            React.createElement(\"div\", { className: styles.label }, \"Surcharges\"),\r\n            React.createElement(\"div\", null, formatMoney(surchargesTotal)),\r\n            React.createElement(\"div\", { className: styles.label }, \"Taxes\"),\r\n            React.createElement(\"div\", null, formatMoney(taxesTotal)),\r\n            React.createElement(\"div\", { className: styles.label }, \"Invoice Total\"),\r\n            React.createElement(\"div\", null, formatMoney(invoiceTotal)),\r\n            React.createElement(\"div\", { className: styles.label }, \"Payments\"),\r\n            React.createElement(\"div\", null, formatMoney(payments)),\r\n            React.createElement(\"div\", { className: styles.divider }),\r\n            React.createElement(\"div\", { className: `${styles.label} ${styles.total} ${previewClassName}` }, \"Balance\"),\r\n            React.createElement(\"div\", { className: `${styles.total} ${previewClassName}` }, formatMoney(invoiceTotal + surchargesTotal + taxesTotal - payments)))));\r\n};\r\nexport default InvoiceBuilder;\r\n","references":["/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/node_modules/@types/react/index.d.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/node_modules/date-fns/typings.d.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/src/helpers/index.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/src/components/builders/InvoiceBuilder/helpers.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/src/components/builders/InvoiceBuilder/types.ts"],"dts":{"name":"/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/invoice-builder/build/components/builders/InvoiceBuilder/InvoiceBuilder.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nimport type { IInvoiceBuilder } from './types';\r\ndeclare const InvoiceBuilder: React.FC<IInvoiceBuilder>;\r\nexport default InvoiceBuilder;\r\n"}}
