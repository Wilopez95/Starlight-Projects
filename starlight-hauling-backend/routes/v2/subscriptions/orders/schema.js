import Joi from 'joi';
import { SORT_ORDERS } from '../../../../consts/sortOrders.js';
import { SUBSCRIPTION_ORDERS_SORT_KEYS } from '../../../../consts/subscriptionAttributes.js';
import {
  SUBSCRIPTION_ORDER_STATUSES,
  SUBSCRIPTION_ORDER_STATUS,
} from '../../../../consts/orderStatuses.js';

const id = Joi.number().integer().positive();
const timePattern = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
const bestTimeToCome = Joi.string().pattern(timePattern).allow(null);

const filters = {
  businessUnitId: id.required(),
  filterByServiceDateFrom: Joi.date().allow(null).optional(),
  filterByServiceDateTo: Joi.date().allow(null).optional(),
  filterByBusinessLine: Joi.array().single().items(id.required()).unique().optional(),
  needsApproval: Joi.boolean().optional(),
  completed: Joi.boolean().optional(),
};

const searchQuery = Joi.alternatives().try(
  Joi.array().items(Joi.string().trim()),
  Joi.string().trim(),
  Joi.number(),
);

export const editSubscriptionOrderData = Joi.object()
  .keys({
    customerId: id, // get creditLimit
    jobSiteContactId: id,
    destinationJobSiteId: id.allow(null).optional(),
    assignedRoute: Joi.string().allow(null).required(),
    // TODO make required when FE was be ready
    applySurcharges: Joi.boolean().default(true),
    permitId: id.allow(null),
    promoId: id.allow(null),
    materialId: id.optional(),
    bestTimeToComeFrom: bestTimeToCome,
    bestTimeToComeTo: bestTimeToCome,
    serviceDate: Joi.date(),
    unlockOverrides: Joi.boolean(),
    instructionsForDriver: Joi.string().allow(null),
    // autogenerated (servicing) orders without rates
    globalRatesServicesId: id.allow(null),
    customRatesGroupServicesId: id.allow(null),
    price: Joi.number().positive().allow(0),
    quantity: Joi.number().positive(),
    highPriority: Joi.boolean(),
    earlyPick: Joi.boolean(),
    someoneOnSite: Joi.boolean(),
    callOnWayPhoneNumber: Joi.string().allow(null),
    textOnWayPhoneNumber: Joi.string().allow(null),
    alleyPlacement: Joi.boolean(),
    toRoll: Joi.boolean(),
    signatureRequired: Joi.boolean(),
    subscriptionContactId: id.allow(null),
    purchaseOrderId: id.allow(null),
    oneTimePurchaseOrderNumber: Joi.string().allow(null),
    thirdPartyHaulerId: id.allow(null),
    hasAssignedRoutes: Joi.boolean(),
    addTripCharge: Joi.boolean(),
    billableServiceId: id,
    customRatesGroupId: id.allow(null),
    overrideCreditLimit: Joi.boolean().default(false).allow(null),
    grandTotal: Joi.number().positive().allow(null),
    surcharges: Joi.array().items(
      Joi.object().keys({
        id: id.optional(),
        billableLineItemId: id.allow(null),
        billableServiceId: id.allow(null),
        customRatesGroupSurchargesId: id.allow(null),
        globalRatesSurchargesId: id.required(),
        materialId: id.allow(null),
        surchargeId: id.required(),
        amount: Joi.number().positive().required(),
        quantity: Joi.number().positive().required(),
      }),
    ),
    lineItems: Joi.array()
      .items(
        Joi.object().keys({
          id,
          billableLineItemId: id.required(),
          globalRatesLineItemsId: id.required(),
          customRatesGroupLineItemsId: id.allow(null),
          materialId: id.allow(null).optional(),
          price: Joi.number().positive().required(),
          quantity: Joi.number().positive().required(),
          unlockOverrides: Joi.boolean(),
        }),
      )
      .default([]),
    droppedEquipmentItem: Joi.string().allow(null),
    pickedUpEquipmentItem: Joi.string().allow(null),
  })
  .required();

export const paginateSortFilterQueryParams = Joi.object().keys({
  skip: Joi.number().integer().positive().allow(0),
  limit: Joi.number().integer().positive(),

  sortBy: Joi.string()
    .valid(...SUBSCRIPTION_ORDERS_SORT_KEYS)
    .optional(),

  sortOrder: Joi.string()
    .valid(...SORT_ORDERS)
    .optional(),

  query: searchQuery,

  status: Joi.string()
    .valid(...SUBSCRIPTION_ORDER_STATUSES)
    .optional(),

  ...filters,
});

export const countParams = Joi.object().keys({
  customerId: id.optional(),
  businessUnitId: id,
});

export const completionParams = Joi.object().keys({
  isCompletion: Joi.boolean().optional(),
  completed: Joi.boolean().optional(),
});

export const validateOrdersData = Joi.object()
  .keys({
    businessUnitId: id.required(),
    status: Joi.string()
      .valid(SUBSCRIPTION_ORDER_STATUS.approved, SUBSCRIPTION_ORDER_STATUS.needsApproval)
      .required(),
    ids: Joi.array().items(id).default([]),
  })
  .required();

export const batchUpdateData = Joi.object()
  .keys({
    businessUnitId: id.required(),
    validOnly: Joi.boolean().default(false),
    status: Joi.string()
      .valid(SUBSCRIPTION_ORDER_STATUS.approved, SUBSCRIPTION_ORDER_STATUS.finalized)
      .required(),
    ids: Joi.array().items(id).default([]),
  })
  .required();

export const calculatePricesSchema = Joi.object().keys({
  businessUnitId: id.required(),
  businessLineId: id.required(),
  customRatesGroupId: id.allow(null).default(null),
  serviceDate: Joi.date().allow(null),
  jobSiteId: id.allow(null),
  needRecalculateSurcharge: Joi.boolean().default(false),

  subscriptionOrder: Joi.object()
    .keys({
      subscriptionOrderId: id.allow(null),
      billableServiceId: id.required().allow(null),
      materialId: id.allow(null),
      price: Joi.number().positive().allow(0).allow(null).default(0),
      quantity: Joi.number().positive(),
      unlockOverrides: Joi.boolean().default(false),
      // TODO make required when FE was be ready
      applySurcharges: Joi.boolean().default(false),

      lineItems: Joi.array().items(
        Joi.object().keys({
          lineItemId: id.allow(null),
          billableLineItemId: id.allow(null),
          materialId: id.allow(null),
          price: Joi.number().positive().allow(0).allow(null).default(0),
          quantity: Joi.number().positive(),
          unlockOverrides: Joi.boolean().default(false),
          // TODO make required when FE was be ready
          applySurcharges: Joi.boolean().default(false),
        }),
      ),
    })
    .required(),
});
