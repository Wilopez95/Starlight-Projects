import { serviceItemStreamResponseMapper } from './serviceItemStreamResponseMapper.js';

describe('serviceItemStreamResponseMapper', () => {
  it('should map service item properly', () => {
    const fakeServiceItem = {
      id: 1,
      originalId: 1,
      subscriptionId: 1,
      serviceFrequencyId: 1,
      serviceDaysOfWeek: {
        0: {
          route: '',
          requiredByCustomer: false,
        },
      },
      foo: 'bar',
      bar: 'foo',
      baz: 'foo bar',
      subscription: {
        id: 'id',
        original_id: 'originalId',
        third_party_hauler_id: 'thirdPartyHaulerId',
        status: 'status',
        customer_id: 'customerId',
        customer_job_site_id: 'customerJobSiteId',
        job_site_note: 'jobSiteNote',
        job_site_contact_id: 'jobSiteContactId',
        driver_instructions: 'driverInstructions',
        equipment_type: 'equipmentType',
        reason: 'reason',
        reason_description: 'reasonDescription',
        created_at: 'createdAt',
        updated_at: 'updatedAt',
        business_line_id: 'businessLineId',
        business_unit_id: 'businessUnitId',
        start_date: 'startDate',
        end_date: 'endDate',
        best_time_to_come_from: 'bestTimeToComeFrom',
        best_time_to_come_to: 'bestTimeToComeTo',
        foo: 'bar',
        bar: 'foo',
        baz: 'foo bar',
      },
      jobSite: {
        id: 'id',
        originalId: 'originalId',
        addressLine1: 'addressLine1',
        addressLine2: 'addressLine2',
        city: 'city',
        state: 'state',
        zip: 'zip',
        foo: 'bar',
        bar: 'foo',
        baz: 'foo bar',
      },
      material: {
        id: 'id',
        original_id: 'originalId',
        foo: 'bar',
        bar: 'foo',
        baz: 'foo bar',
      },
      billableService: {
        id: 'id',
        original_id: 'originalId',
        description: 'description',
        equipment_item_id: 'equipmentItemId',
        action: 'action',
        foo: 'bar',
        bar: 'foo',
        baz: 'foo bar',
      },
      serviceArea: {
        id: 'id',
        original_id: 'originalId',
        foo: 'bar',
        bar: 'foo',
        baz: 'foo bar',
      },
      customer: {
        id: 'id',
        original_id: 'originalId',
        foo: 'bar',
        bar: 'foo',
        baz: 'foo bar',
      },
    };

    const result = serviceItemStreamResponseMapper.mapServiceItem(fakeServiceItem);

    expect(result).toStrictEqual({
      id: 1,
      originalId: 1,
      subscriptionId: 1,
      serviceFrequencyId: 1,
      serviceDaysOfWeek: {
        0: {
          route: '',
          requiredByCustomer: false,
        },
      },
      subscription: {
        id: 'id',
        originalId: 'originalId',
        thirdPartyHaulerId: 'thirdPartyHaulerId',
        status: 'status',
        customerId: 'customerId',
        customerJobSiteId: 'customerJobSiteId',
        jobSiteNote: 'jobSiteNote',
        jobSiteContactId: 'jobSiteContactId',
        driverInstructions: 'driverInstructions',
        equipmentType: 'equipmentType',
        reason: 'reason',
        reasonDescription: 'reasonDescription',
        createdAt: 'createdAt',
        updatedAt: 'updatedAt',
        businessLineId: 'businessLineId',
        businessUnitId: 'businessUnitId',
        startDate: 'startDate',
        endDate: 'endDate',
        bestTimeToComeFrom: 'bestTimeToComeFrom',
        bestTimeToComeTo: 'bestTimeToComeTo',
      },
      jobSite: {
        id: 'id',
        originalId: 'originalId',
        addressLine1: 'addressLine1',
        addressLine2: 'addressLine2',
        city: 'city',
        state: 'state',
        zip: 'zip',
      },
      material: {
        id: 'id',
        originalId: 'originalId',
      },
      billableService: {
        id: 'id',
        originalId: 'originalId',
        description: 'description',
        equipmentItemId: 'equipmentItemId',
        action: 'action',
      },
      serviceArea: {
        id: 'id',
        originalId: 'originalId',
      },
      customer: {
        id: 'id',
        originalId: 'originalId',
      },
    });
  });
});
