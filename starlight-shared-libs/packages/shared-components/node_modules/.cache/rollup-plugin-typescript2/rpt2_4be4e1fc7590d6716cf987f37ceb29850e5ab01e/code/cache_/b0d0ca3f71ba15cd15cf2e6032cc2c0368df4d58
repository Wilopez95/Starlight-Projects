{"code":"export {};\r\n//# sourceMappingURL=types.js.map","references":["/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/shared-components/src/common/Select/types.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/common/Select/Autocomplete/types.ts\"],\"names\":[],\"mappings\":\"\"}","dts":{"name":"/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/shared-components/build/common/Select/Autocomplete/types.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nimport { IBaseSelect, ISelectOption, ISelectOptionGroup } from \"../types\";\r\nexport interface IAutocomplete extends IBaseSelect {\r\n    configs: IAutocompleteConfig[];\r\n    search?: string;\r\n    minSearchLength?: number;\r\n    background?: React.FC<{\r\n        expanded: boolean;\r\n    }>;\r\n    selectedValue?: string;\r\n    value?: string | ISelectOption[] | null;\r\n    isMulti?: boolean;\r\n    onSearchChange(name: string, newValue: string): void;\r\n    onRequest(search: string): Promise<AutocompleteData>;\r\n    onClear?(): void;\r\n    onChange?(value: AutocompleteData): void;\r\n}\r\nexport declare type AutocompleteData = unknown[] | Record<string, unknown[]> | null;\r\nexport interface IAutocompleteConfig extends Omit<ISelectOptionGroup, 'options'> {\r\n    name: string;\r\n    template: React.ReactElement;\r\n    onSelect(data: unknown): void;\r\n    isOptionDisabled?(data: unknown): boolean;\r\n}\r\nexport interface IAutocompleteOptionGroupData extends IAutocompleteConfig {\r\n    options: unknown[];\r\n}\r\n"}}
