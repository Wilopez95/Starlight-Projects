{"code":"import { useCallback, useRef, useState } from 'react';\r\nimport { useIntersectionObserver } from \"./useIntersectionObserver/useIntersectionObserver\";\r\nexport const useInView = (options = {}) => {\r\n    const elementRef = useRef(null);\r\n    const [inView, setInView] = useState(false);\r\n    const handleChangeRef = useCallback((node) => {\r\n        elementRef.current = node;\r\n        setInView(false);\r\n    }, []);\r\n    const handleObserve = useCallback((element) => {\r\n        setInView(element.isIntersecting);\r\n    }, []);\r\n    useIntersectionObserver(elementRef.current, handleObserve, options);\r\n    return [inView, handleChangeRef];\r\n};\r\n//# sourceMappingURL=useInView.js.map","references":["/Users/wilson/Documents/Starlight/starlight-shared-libs/node_modules/@types/react/index.d.ts","/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/shared-components/src/hooks/useIntersectionObserver/useIntersectionObserver.ts"],"map":"{\"version\":3,\"file\":\"useInView.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/hooks/useInView.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEtD,OAAO,EAAE,uBAAuB,EAAE,0DAA0D;AAE5F,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,UAAoC,EAAE,EAAmB,EAAE;IACnF,MAAM,UAAU,GAAG,MAAM,CAAqB,IAAI,CAAC,CAAC;IACpD,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAE5C,MAAM,eAAe,GAAG,WAAW,CAAC,CAAC,IAAiB,EAAE,EAAE;QACxD,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;QAC1B,SAAS,CAAC,KAAK,CAAC,CAAC;IACnB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,aAAa,GAAG,WAAW,CAAC,CAAC,OAAkC,EAAE,EAAE;QACvE,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IACpC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,uBAAuB,CAAC,UAAU,CAAC,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IAEpE,OAAO,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AACnC,CAAC,CAAC\"}","dts":{"name":"/Users/wilson/Documents/Starlight/starlight-shared-libs/packages/shared-components/build/hooks/useInView.d.ts","writeByteOrderMark":false,"text":"export declare const useInView: (options?: IntersectionObserverInit) => UseInViewResult;\r\ndeclare type UseInViewResult = [boolean, (node: HTMLElement) => void];\r\nexport {};\r\n"}}
